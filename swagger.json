{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0-BETA",
    "title": "FISPAN API Reference",
    "contact": {
      "email": "sales@fispan.com",
      "url": "https://fispan.com/contact-us/"
    },
    "x-logo": {
      "url": "https://fispan.com/wp-content/uploads/2019/09/Screenshot.png"
    },
    "description": "# FISPAN Data & Payment APIs\n\nWelcome to the FISPAN's API Documentation!\n\nHere you'll find comprehensive information to guide you on retrieving client data and generating payment requests\nwith our API. This includes configuration, error handling, and inline processing.\n\nFISPAN APIs provide you the ability to view client bank accounts, balance and transaction data, and initiate a\nvariety of different payments.\n\nAPI capabilities:\n\n* Retrieve bank balance data\n* Retrieve bank transaction data\n* Initiate ACH Credit, Fedwire Credit, Checkprint and Positive Pay payments\n* Create and update counterparties in banking system\n* Validate bank account information\n* Enable and configure a payment processor integration\n* [Counterparty](#tag/Counterparty-(Payor-or-Payee)) management\n\nFISPAN APIs are based on RESTful architecture. Using resources URL, HTTP verbs, [JSON](https://www.json.org/json-en.html),\nstandard [HTTP Codes](#tag/HTTP-Status-Codes) with extended error body for more details. All responses have [JSON](https://www.json.org/json-en.html)\nrepresentation, encoded in the [UTF-8](https://en.wikipedia.org/wiki/UTF-8) character encoding\n`Content-Type: application/json; charset=utf-8`.\n\n`DEPRECATION NOTICE:` all [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) links will be removed from all API responses.\n\nYou can view request and response examples in the dark area to the right.\n\nHere is a quick glossary of common terms used in this documentation:\n\nterm | description\n--- | ---\nClient | A client of the service provider (Payor)\nCounterparty | A payee (subject of payment) or payor relationship that you facilitate\nPayment | Payments are made from Client to Vendor\n\n## Getting started\n\nBefore payments can be released through FISPAN, certain prerequisites must be met in order to do so. The following\nsequence of API endpoints are required for a successful payment origination:\n\n1. Getting familiar with our [Security](#tag/Security) practices.\n1. Creating your [Counterparties](#tag/Counterparty-(Payor-or-Payee)).\n1. Initiating [Payment](#tag/Payments) requests between counterparties and yourself.\n1. Checking payment status with [Webhooks](#tag/Webhooks) or by [Pooling Payment Status Updates](#tag/Polling-Payment-Status-Updates).\n\n## Servers\n\nName | URL | Descriiption\n--- | --- | ---\nSandbox | https://sandbox.fispan.cloud | Staging Server\nProduction | https://sys.fispan.live | Production Server\n\n## Versioning\n\nThe current version of FISPAN APIs is `1`.\n\nIn case we have to introduce backward-incompatible API changes, we will increase the API version number.\nBy default all requests use the latest version. To use a particular version add `API-Version` HTTP header, with value\nas version number, e.g. `API-Version: 1`.\n\nExample of changes that are not backward-incompatible:\n\n* Adding new endpoints.\n* Adding new fields to the JSON response payload.\n* Adding not mandatory parameters to the endpoint.\n\n`FISPAN recommends all clients to send correct version value with each request.`\n\nAll backward-incompatible changes releases will be announced beforehand and will be available in the API sandbox prior to production.\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->"
  },
  "tags": [
    {
      "name": "Security",
      "description": "All FISPAN API requests must be made using [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Requests over [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)\nwill return `301 - Moved Permanently` HTTP Status code with proper URL in the `Location` HTTP Header.\n\nAll API calls **require** an `access_token`. You can learn more about this in the [Authentication](#authentication) section."
    },
    {
      "name": "Counterparty (Payor or Payee)",
      "description": "We created the concept of counterparties to represent either the payor or the payee (in some cases both). A\nCounterparty is an entity that is managed by you and acts as either a Payor or Payee (Subject of Payment) for a given\nPayment. A payor could be a corporation with the payee as an employee receiving their paycheck. A Payment Method needs\nto be defined in order to complete the Payment Request.\n\n`NOTE:` Payment Type fields that store bank information such as an account number are write only. In other words, data\ncan be saved and changed but never read."
    },
    {
      "name": "Counterparty Payment Methods",
      "description": "It is possible to perform CRUD operations on a counterparty’s Payment Methods.\n\n`NOTE` Some Payment Methods might include fields that store sensitive bank information such as an account number.\nThese fields are write-only meaning that the data can be saved and changed but never read."
    },
    {
      "name": "Balance & Transactions",
      "description": "It is possible to check what bank accounts the logged in client have on FISPAN's platform and read transactions available on FISPAN's platform."
    },
    {
      "name": "Payments",
      "description": "Payments are transactions that can be made between you and a counterparty, a counterparty and you, and between two\ncounterparties. For any of the transactions, a minimum of one bank account per counterparty (and your company if\nyou are transacting) alonside at least one payment method must be set.\n\nPayments will be processed asynchronously. Once a payment is received by FISPAN it be updated with the `RECEIVED`\nstatus and will be sent to processing queue. [Webhooks](#tag/Get-Payment-Updates)\ncan be used to receive status updates.\n\n## Payment Request Statuses\n\nStatus | Description\n--- | ---\nRECEIVED | Request received and stored in the system. Basic syntax validation passed\nPROCESSING | Business validation has started, payment is being processed\nSCHEDULED | Payment is scheduled for a future date execution\nCANCEL_REQUESTED | Payment cancellation has be requested\nCANCELLED | Payment has been cancelled\nVALIDATION_FAILED | Business validation rules failed (normally before trying to fulfill, examples)\nFAILED | Any type of unexpected failure during payment processing\nREFUSED | Payment has been refused by a recipient (where applicable)\nEXPIRED | Payment passed expiration date and can not be fulfilled (where it’s applicable)\nCOMPLETED | Payment has been successfully sent out and accepted by provider"
    },
    {
      "name": "Payments (Subject of Payment Method)",
      "description": "Payments with the Subject of Payment method allows you to make payments directly to destination bank accounts instead\nof to previously created and updated vendors. For any of the transactions, a minimum of one bank account per counterparty\nalongside at least one payment method must be set.\n\nPayments will be processed asynchronously. Once a payment is received it be updated with the `RECEIVED` status and\nwill be sent to processing queue. [Webhooks](#tag/Get-Payment-Updates)\ncan be used to receive status updates."
    },
    {
      "name": "Get Payment Updates",
      "description": "FISPAN may process requests asynchronously, for example, when you send a payment request, then the response will\nbe the `RECEIVED` status. When the Payment Request status changes to `COMPLETED` an event is generated. Webhooks\ncan be used to subscribe for such events.\n\n## Securing Webhooks\n\nTo ensure that the URL from Wehook is receiving requests from us, we can sign requests with signingSecret using a\nhash-based message authentication code [HMAC](https://en.wikipedia.org/wiki/HMAC) with [SHA-256](https://en.wikipedia.org/wiki/SHA-2).\n\nIf `signingSecret` attribute is set during Webhook registration then `Signature` HTTP header will be added to the\nrequest containing computed [HMAC](https://en.wikipedia.org/wiki/HMAC) with the [SHA-256](https://en.wikipedia.org/wiki/SHA-2)\nhash function, using the `signingSecret` as the key and the request payload string as the message.\n\n### To Verify Request\n\n1. Get signature from `Signature` request header\n1. Compute an [HMAC](https://en.wikipedia.org/wiki/HMAC) with the [SHA-256](https://en.wikipedia.org/wiki/SHA-2)\nhash function, using the `signingSecret` as the key and the request payload string as the message.\n1. Compare the results of steps `1` and `2`. If they are equal, then the request is valid.\n\n## Webhooks Events\n\nEvent Name | Description\n--- | ---\nPAYMENT.ALL | To subscribe to all events\nPAYMENT.RECEIVED | Request has been received and stored in a system, basic syntax validation passed\nPAYMENT.PROCESSING | Business validation has started, payment is being processed\nPAYMENT.SCHEDULED | Payment is scheduled for a future date execution\nPAYMENT.CANCEL_REQUESTED | Payment cancellation has been requested\nPAYMENT.CANCELLED | Payment has been cancelled\nPAYMENT.VALIDATION_FAILED | Business validation rules failed (normally before trying to fulfill, examples)\nPAYMENT.FAILED | Any type of unexpected failure during payment processing\nPAYMENT.REFUSED | Payment has been refused by a recipient (where applicable)\nPAYMENT.EXPIRED | Payment passed expiration date and can not be fulfilled (where it’s applicable)\nPAYMENT.COMPLETED | Payment has been successfully sent out and accepted by provider\n\n## Polling Payment Status Updates\n\nIn the event you are unable to use Webhooks, you can poll Payments Status Log and filter by timestamp of the status changes.\nBy doing so, you will be able to receive all status updates from the latest poll, avoiding the polling list of Payment Requests.\n\nEndpoint returns pageable list of status updates. The returned list is sorted by `timestamp` in ascending order"
    },
    {
      "name": "API Details & Troubleshooting",
      "description": "## Masking Sentive Data\n\nSome sensitive data is not exposed to the API client as a security measure.\n\nIn this case, the field value will be masked.\n\nFor example if `SSN = \"123456789\"` has been submitted, FISPAN will return `SSN = \"*******89”`.\n\nIf subsequent `SSN` submissions contain any *, the incoming field value will be ignored.\n\nIf `SSN = 777777777` is submitted, the field value will be updated.\n\n## Pagination\n\nFor a resource that is enabled for pagination, typically it will be 'search’ or 'listing’ resources,\nyou can use standard query parameters:\n\n### Pagination Parameters\n\nAttribute | Default | Required | Comments\n--- | --- | --- | ---\nsize | 20 | false | Number of items on the page\npage | | false | Number of the page to extract\n\n### Page Object\n\nAttribute | Comments\n--- | ---\nsize | The number of items on the page\ntotalElements | The total number of elements in the list/search\ntotalPages | The total number of pages\nnumber | The number of the current page\n\n## HTTP Status Codes\n\nSuccessful response returns `2XX` HTTP status code with body containing RESTful resource representation in JSON format.\nAll failed requests will have `4XX` or `5XX` HTTP status code and JSON body with detailed description and\n[FISPAN error code](#tag/FISPAN-Errors)\n\nCode | Meaning\n--- | ---\n200 | `OK` - Everything was OK.\n201 | `Created` - New resource created successfully.\n202 | `Accepted` - The request accepted and will be processed.\n204 | `No Content` - The request was processed but there is nothing to return.\n400 | `Bad Request` – The request contains errors.\n401 | `Unauthorized` – The authentication process failed, or the access token is not valid.\n403 | `Forbidden` – Access to this resource is restricted for the given caller.\n404 | `Not Found` – The specified resource could not be found.\n405 | `Method Not Allowed` - An invalid method was used to access a resource.\n406 | `Not Acceptable` – An unsupported format was requested.\n500 | `Internal Server Error` – There was a problem with the API host server. Try again later.\n503 | `Service Unavailable` – API is temporarily offline for maintenance. Try again later.\n\n### Unsuccessful API Call\n\nAttribute | Data Type | Comments\n--- | --- | ---\nid | string | UUID can be provided to FISPAN support to track the error\ntimestamp | string | Time stamp in UTC\nerrors | array | Array of array objects see description below\n\n### Error Object\n\nAttribute | Data Type | Comments\n--- | --- | ---\ncode | number | [FISPAN Error](#tag/FISPAN-Errors).\nmessage | string | A more explanatory message for the user.\n\n## FISPAN Error Codes\n\n### 100000\n**Unknown Error Occurred**\n\nAn error occurred that has not been handled by the FISPAN Platform. Please inform FISPAN Support if this continues to occurr.\n\n### 100001\n**FISPAN Error Occurred**\n\nAn error, expected by the FISPAN platform, occurred that has been handled by reporting it back on the request.\n\n### 100002\n**General Validation Failed**\n\nBusiness logic validation failed based on the payload in the request\n\n### 100403\n**Unauthorized**\n\nA resource requested was not accessible based on the current authentication\n\n### 100404\n**Not Found**\n\nA resource requested was not found on this URI\n\n### 100405\n**Request Method Not Allowed**\n\nThe request failed because resource does not allow the given HTTP Method\n\n### 100415\n**Not Supported**\n\nThe request failed because the payload is in a format not supported by this method on the resource\n\n### 100503\n**Service Unavailable**\n\nThe request failed because the service is unable to handle it due to a temparay overload or scheduled maintenance.\n\n### 109000\n**Not Authenticated**\n\nThe request failed authentication\n\n### 200000\n**Validation Failed**\n\nThe request failed because the payload contained properties that failed their validation\n\n### 200001\n**Unable to read JSON**\n\nThe request failed because the payload contained invalid JSON\n\n### 300500\n**Unknown Persistence Store Error Occured**\n\nAn error occured on the Persistence Store if the FISPAN Platform that has not been handled. Please inform FISPAN Support if this continues to occurr."
    }
  ],
  "servers": [
    {
      "url": "https://dev1.fispan.cloud",
      "description": "Development Server"
    },
    {
      "url": "https://sandbox.fispan.cloud",
      "description": "Staging Server"
    },
    {
      "url": "https://sys.fispan.live",
      "description": "Production Server"
    }
  ],
  "paths": {
    "/accounts/oauth/token": {
      "post": {
        "tags": [
          "Security"
        ],
        "summary": "Authentication",
        "description": "FISPAN uses [OAuth 2.0](https://oauth.net/2) protocol to authenticate the callers and grant appropriate rights.\nA correct API call to the authentication service will return an `access_token`. Add this access token to the\n`Authorization` HTTP Header for every other API call.\n\n`Authorization: Bearer <access_token>`\n\n### Client Authentication\nFISPAN uses [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) to get an `access_token`.\nThis requires two steps:\n\n1. [Base64](https://www.base64decode.org/) encoded string `client_id:client_secret`\n1. Add the encoded string from step 1 to the request HTTP header `Authorization: Basic <base64EncodedString>`",
        "operationId": "getOAuthToken",
        "security": [
          {
            "HTTP Basic": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/query-grant-type"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth-token"
                },
                "example": {
                  "access_token": "261e80be-58e1-4ecf-8f24-c1cc3f8ff168",
                  "token_type": "bearer",
                  "expires_in": 1800,
                  "scope": "read write"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Missing Grant Type": {
                    "value": {
                      "error": "invalid_request",
                      "error_description": "Missing grant type"
                    }
                  },
                  "Invalid Grant Type": {
                    "value": {
                      "error": "unsupported_grant_type",
                      "error_description": "Unsupported grant type"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          }
        }
      }
    },
    "/api/config-api/bank-accounts": {
      "get": {
        "tags": [
          "Balance & Transactions"
        ],
        "summary": "List Client Bank Accounts",
        "description": "This endpoint will list all existing Bank Accounts for the authorized client.\n\nWhen the request is successful, this enpoint will return `HTTP 200` with the list of Bank Accounts. If no bank accounts\nare found, an `HTTP 200` with an empty list is returned.",
        "operationId": "listAllBankAccounts",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array-of-bank-accounts"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/config-api/bank-accounts/{account_id}": {
      "get": {
        "tags": [
          "Balance & Transactions"
        ],
        "summary": "Read Client Bank Account",
        "description": "This endpoint will read the selected Bank Accounts for the authorized client.\n\nWhen the request is successful, this enpoint will return `HTTP 200` with the Bank Account found. If the Bank Account\nis not found, an `HTTP 404` with an error will be returned.",
        "operationId": "readBankAccountByAccountId",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path-account-id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bank-account"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Not Found",
                  "errors": [
                    {
                      "code": 100404,
                      "message": "Unable to find Path : /bank-accounts/c923c32e-aa96-4191-af83-13a0496c170s"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/config-api/vendors": {
      "get": {
        "tags": [
          "Counterparty (Payor or Payee)"
        ],
        "summary": "List All Counterparties",
        "description": "This endpoint will list all existing Counterparties for the authorized client.\n\nWhen the request is successful, this enpoint will return `HTTP 200` with an array of Counterparties. If no counterparties\nare found, an `HTTP 200` with an empty list is returned.\n\n[Pagination](#tag/Pagination) is enabled for this request.",
        "operationId": "listAllVendors",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/query-page"
          },
          {
            "$ref": "#/components/parameters/query-size"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/embedded-array-of-vendors"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "page": {
                          "$ref": "#/components/schemas/page"
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "_embedded": {
                    "vendors": [
                      {
                        "id": "5d831ae0-807b-45a5-8e89-cfea92356a5e",
                        "externalId": "71e3549b-da92-4e5b-9684-468bd44dbfaa",
                        "subjectOfPayment": {
                          "externalId": "71e3549b-da92-4e5b-9684-468bd44dbfaa",
                          "type": null,
                          "name": "Heroes Inc",
                          "firstName": "Clark",
                          "lastName": "Kent",
                          "taxId": null,
                          "principleOfficerDoB": null,
                          "ssn": null,
                          "bankAccounts": [
                            {
                              "externalId": "c20c962e-3109-41a2-8bd4-91109d7f5007",
                              "erpIds": [],
                              "accountLabel": null,
                              "bankName": null,
                              "institutionNumber": null,
                              "iban": null,
                              "transitNumber": null,
                              "routingNumber": "021000021",
                              "accountNumber": "021000021765",
                              "countryCode": "US",
                              "currencyCode": "USD",
                              "accountType": "CHECKING",
                              "bic": null,
                              "balanceInfo": null,
                              "checkTemplateCodes": [],
                              "usageProfileIds": [],
                              "vccAccountPoolId": null,
                              "defaultAccount": false,
                              "defaultFor": [
                                "INTERNATIONAL_WIRE"
                              ],
                              "paymentDefaults": {
                                "purposeMessage": "Salary",
                                "purposeCode": "S0801"
                              }
                            },
                            {
                              "externalId": "971f8f33-02ef-4799-a574-a2b9a40d3569",
                              "erpIds": [],
                              "accountLabel": null,
                              "bankName": null,
                              "institutionNumber": null,
                              "iban": null,
                              "transitNumber": null,
                              "routingNumber": "021000021",
                              "accountNumber": "021000021765",
                              "countryCode": "CA",
                              "currencyCode": "USD",
                              "accountType": "CHECKING",
                              "bic": null,
                              "balanceInfo": null,
                              "checkTemplateCodes": [],
                              "usageProfileIds": [],
                              "vccAccountPoolId": null,
                              "defaultAccount": false,
                              "defaultFor": [
                                "ACH"
                              ]
                            }
                          ],
                          "phoneNumbers": [
                            {
                              "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                              "phoneNumber": "316-618-4107",
                              "types": [
                                "CONTACT",
                                "BUSINESS",
                                "PERSONAL"
                              ]
                            }
                          ],
                          "emails": [
                            {
                              "id": "4eb9ec0f-638a-4443-aee1-bfcc210cc425",
                              "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                              "email": "clark.kent@heroes.me",
                              "name": "Clark Kent",
                              "types": [
                                "PAYMENT"
                              ],
                              "defaultFor": [
                                "ECHECK"
                              ]
                            },
                            {
                              "id": "c4f8b23b-6025-46af-95d6-9c2e84504916",
                              "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                              "email": "clark.kent@heroes.me",
                              "name": "Clark Kent",
                              "types": [
                                "CONTACT"
                              ],
                              "defaultFor": [
                                "WIRE"
                              ]
                            }
                          ],
                          "availablePaymentMethods": [
                            "WIRE",
                            "ACH",
                            "CHECK"
                          ],
                          "addresses": [
                            {
                              "id": "ac6e0ccc-fc8d-4c3d-a3ba-68c9f6326267",
                              "externalId": null,
                              "line1": "1936 Sullivan Lane",
                              "line2": null,
                              "city": "New Trony",
                              "stateProvince": null,
                              "country": "US",
                              "postalCode": "44243",
                              "types": [
                                "PAYMENT",
                                "CONTACT"
                              ],
                              "defaultFor": [
                                "CHECK"
                              ]
                            }
                          ],
                          "fullContactName": "Clark Kent"
                        },
                        "batchInvoices": false,
                        "erpProvider": null,
                        "subjectOfPaymentRole": "VENDOR",
                        "invoiceBatchingSupported": false
                      }
                    ]
                  },
                  "page": {
                    "size": 1,
                    "totalElements": 1,
                    "totalPages": 1,
                    "number": 0
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Counterparty (Payor or Payee)"
        ],
        "summary": "Create Counterparty",
        "description": "Creates a new Counterparty on FISPAN system.\n\nRequires that a Counterpary object is sent on the Request Body.",
        "operationId": "createCounterparty",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vendor"
              },
              "example": {
                "externalId": "71e3549b-da92-4e5b-9684-468bd44dbfaa",
                "subjectOfPayment": {
                  "name": "Heroes Inc",
                  "firstName": "Clark",
                  "lastName": "Kent",
                  "emails": [
                    {
                      "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                      "email": "clark.kent@heroes.me",
                      "name": "Clark Kent",
                      "types": [
                        "PAYMENT"
                      ],
                      "defaultFor": [
                        "CHECK"
                      ]
                    },
                    {
                      "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                      "email": "clark.kent@heroes.me",
                      "name": "Clark Kent",
                      "types": [
                        "CONTACT"
                      ],
                      "defaultFor": [
                        "WIRE"
                      ]
                    }
                  ],
                  "phoneNumber": "877-456-4376",
                  "addresses": [
                    {
                      "line1": "1936 Sullivan Lane",
                      "line2": null,
                      "city": "New Trony",
                      "province": "NY",
                      "country": "US",
                      "postalCode": "44243",
                      "types": [
                        "PAYMENT",
                        "CONTACT"
                      ],
                      "defaultFor": [
                        "CHECK"
                      ]
                    }
                  ],
                  "bankAccounts": [
                    {
                      "routingNumber": "021000021",
                      "accountNumber": "021000021765",
                      "accountType": "CHECKING",
                      "currencyCode": "USD",
                      "countryCode": "US",
                      "defaultFor": [
                        "WIRE"
                      ]
                    },
                    {
                      "routingNumber": "021000021",
                      "accountNumber": "021000021765",
                      "accountType": "CHECKING",
                      "currencyCode": "USD",
                      "defaultFor": [
                        "ACH"
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vendor"
                },
                "example": {
                  "id": "5d831ae0-807b-45a5-8e89-cfea92356a5e",
                  "externalId": "71e3549b-da92-4e5b-9684-468bd44dbfaa",
                  "subjectOfPayment": {
                    "externalId": "71e3549b-da92-4e5b-9684-468bd44dbfaa",
                    "type": null,
                    "name": "Heroes Inc",
                    "firstName": "Clark",
                    "lastName": "Kent",
                    "taxId": null,
                    "principleOfficerDoB": null,
                    "ssn": null,
                    "bankAccounts": [
                      {
                        "externalId": null,
                        "erpIds": [],
                        "accountLabel": null,
                        "bankName": null,
                        "institutionNumber": null,
                        "iban": null,
                        "transitNumber": null,
                        "routingNumber": "021000021",
                        "accountNumber": "021000021765",
                        "countryCode": "US",
                        "currencyCode": "USD",
                        "accountType": "CHECKING",
                        "bic": null,
                        "balanceInfo": null,
                        "checkTemplateCodes": [],
                        "usageProfileIds": [],
                        "vccAccountPoolId": null,
                        "defaultAccount": false,
                        "defaultFor": [
                          "WIRE"
                        ],
                        "paymentDefaults": null
                      },
                      {
                        "externalId": null,
                        "erpIds": [],
                        "accountLabel": null,
                        "bankName": null,
                        "institutionNumber": null,
                        "iban": null,
                        "transitNumber": null,
                        "routingNumber": "021000021",
                        "accountNumber": "021000021765",
                        "countryCode": null,
                        "currencyCode": "USD",
                        "accountType": "CHECKING",
                        "bic": null,
                        "balanceInfo": null,
                        "checkTemplateCodes": [],
                        "usageProfileIds": [],
                        "vccAccountPoolId": null,
                        "defaultAccount": false,
                        "defaultFor": [
                          "ACH"
                        ]
                      }
                    ],
                    "phoneNumbers": [
                      {
                        "externalId": null,
                        "phoneNumber": "877-456-4376",
                        "types": null
                      }
                    ],
                    "emails": [
                      {
                        "id": "4eb9ec0f-638a-4443-aee1-bfcc210cc425",
                        "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                        "email": "clark.kent@heroes.me",
                        "name": "Clark Kent",
                        "types": [
                          "PAYMENT"
                        ],
                        "defaultFor": [
                          "CHECK"
                        ]
                      },
                      {
                        "id": "c4f8b23b-6025-46af-95d6-9c2e84504916",
                        "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                        "email": "clark.kent@heroes.me",
                        "name": "Clark Kent",
                        "types": [
                          "CONTACT"
                        ],
                        "defaultFor": [
                          "WIRE"
                        ]
                      }
                    ],
                    "availablePaymentMethods": [
                      "WIRE",
                      "ACH",
                      "CHECK"
                    ],
                    "addresses": [
                      {
                        "id": "ac6e0ccc-fc8d-4c3d-a3ba-68c9f6326267",
                        "externalId": null,
                        "line1": "1936 Sullivan Lane",
                        "line2": null,
                        "city": "New Trony",
                        "stateProvince": "NY",
                        "country": "US",
                        "postalCode": "44243",
                        "types": [
                          "PAYMENT",
                          "CONTACT"
                        ],
                        "defaultFor": [
                          "CHECK"
                        ]
                      }
                    ],
                    "fullContactName": null
                  },
                  "batchInvoices": false,
                  "erpProvider": null,
                  "subjectOfPaymentRole": "VENDOR",
                  "invoiceBatchingSupported": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/config-api/vendors/search": {
      "get": {
        "tags": [
          "Counterparty (Payor or Payee)"
        ],
        "summary": "Search Counterparties",
        "description": "A multiple-column search is available on counterparties. This means that you can query one endpoint and search\nagainst multiple columns. This is useful for users who know what they want but maybe don’t know where it is.\n\nA simple text string is sent to the endpoint, and any counterparty objects matching that string on one or more of\nthe searchable columns will be returned. This is flexible, and more columns can be added as required.\n\nThe following fields on a Counterparty are searchable at this time:\n* Counterparty ID\n* Counterparty name\n* Counterparty phone number\n* Counterparty email address\n\nWhen the request is successful, this enpoint will return `HTTP 200` with an array of Counterparties. If no counterparties\nare found, an `HTTP 200` with an empty list is returned.",
        "operationId": "searchCounterparties",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/query-for"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/embedded-array-of-vendors"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "page": {
                          "$ref": "#/components/schemas/page"
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "_embedded": {
                    "vendors": [
                      {
                        "id": "5d831ae0-807b-45a5-8e89-cfea92356a5e",
                        "externalId": "71e3549b-da92-4e5b-9684-468bd44dbfaa",
                        "subjectOfPayment": {
                          "externalId": "71e3549b-da92-4e5b-9684-468bd44dbfaa",
                          "type": null,
                          "name": "Heroes Inc",
                          "firstName": "Clark",
                          "lastName": "Kent",
                          "taxId": null,
                          "principleOfficerDoB": null,
                          "ssn": null,
                          "bankAccounts": [
                            {
                              "externalId": "c20c962e-3109-41a2-8bd4-91109d7f5007",
                              "erpIds": [],
                              "accountLabel": null,
                              "bankName": null,
                              "institutionNumber": null,
                              "iban": null,
                              "transitNumber": null,
                              "routingNumber": "021000021",
                              "accountNumber": "021000021765",
                              "countryCode": "US",
                              "currencyCode": "USD",
                              "accountType": "CHECKING",
                              "bic": null,
                              "balanceInfo": null,
                              "checkTemplateCodes": [],
                              "usageProfileIds": [],
                              "vccAccountPoolId": null,
                              "defaultAccount": false,
                              "defaultFor": [
                                "INTERNATIONAL_WIRE"
                              ],
                              "paymentDefaults": {
                                "purposeMessage": "Salary",
                                "purposeCode": "S0801"
                              }
                            },
                            {
                              "externalId": "971f8f33-02ef-4799-a574-a2b9a40d3569",
                              "erpIds": [],
                              "accountLabel": null,
                              "bankName": null,
                              "institutionNumber": null,
                              "iban": null,
                              "transitNumber": null,
                              "routingNumber": "021000021",
                              "accountNumber": "021000021765",
                              "countryCode": "CA",
                              "currencyCode": "USD",
                              "accountType": "CHECKING",
                              "bic": null,
                              "balanceInfo": null,
                              "checkTemplateCodes": [],
                              "usageProfileIds": [],
                              "vccAccountPoolId": null,
                              "defaultAccount": false,
                              "defaultFor": [
                                "ACH"
                              ]
                            }
                          ],
                          "phoneNumbers": [
                            {
                              "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                              "phoneNumber": "316-618-4107",
                              "types": [
                                "CONTACT",
                                "BUSINESS",
                                "PERSONAL"
                              ]
                            }
                          ],
                          "emails": [
                            {
                              "id": "4eb9ec0f-638a-4443-aee1-bfcc210cc425",
                              "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                              "email": "clark.kent@heroes.me",
                              "name": "Clark Kent",
                              "types": [
                                "PAYMENT"
                              ],
                              "defaultFor": [
                                "ECHECK"
                              ]
                            },
                            {
                              "id": "c4f8b23b-6025-46af-95d6-9c2e84504916",
                              "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                              "email": "clark.kent@heroes.me",
                              "name": "Clark Kent",
                              "types": [
                                "CONTACT"
                              ],
                              "defaultFor": [
                                "WIRE"
                              ]
                            }
                          ],
                          "availablePaymentMethods": [
                            "WIRE",
                            "ACH",
                            "CHECK"
                          ],
                          "addresses": [
                            {
                              "id": "ac6e0ccc-fc8d-4c3d-a3ba-68c9f6326267",
                              "externalId": null,
                              "line1": "1936 Sullivan Lane",
                              "line2": null,
                              "city": "New Trony",
                              "stateProvince": null,
                              "country": "US",
                              "postalCode": "44243",
                              "types": [
                                "PAYMENT",
                                "CONTACT"
                              ],
                              "defaultFor": [
                                "CHECK"
                              ]
                            }
                          ],
                          "fullContactName": "Clark Kent"
                        },
                        "batchInvoices": false,
                        "erpProvider": null,
                        "subjectOfPaymentRole": "VENDOR",
                        "invoiceBatchingSupported": false
                      }
                    ]
                  },
                  "page": {
                    "size": 1,
                    "totalElements": 1,
                    "totalPages": 1,
                    "number": 0
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Error Occurred",
                  "errors": [
                    {
                      "code": 100000,
                      "message": "Required String parameter 'for' is not present"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/config-api/vendors/search/by-name": {
      "get": {
        "tags": [
          "Counterparty (Payor or Payee)"
        ],
        "summary": "Search Counterparties By Name",
        "description": "A search that will look for a given name on the database.\n\nWhen the request is successful, this enpoint will return `HTTP 200` with an array of Counterparties. If no counterparties\nare found, an `HTTP 200` with an empty list is returned.\n\n[Pagination](#tag/Pagination) is enabled for this request.",
        "operationId": "searchCounterpartiesByName",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/query-name"
          },
          {
            "$ref": "#/components/parameters/query-page"
          },
          {
            "$ref": "#/components/parameters/query-size"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/embedded-array-of-vendors"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "page": {
                          "$ref": "#/components/schemas/page"
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "_embedded": {
                    "vendors": [
                      {
                        "id": "5d831ae0-807b-45a5-8e89-cfea92356a5e",
                        "externalId": "71e3549b-da92-4e5b-9684-468bd44dbfaa",
                        "subjectOfPayment": {
                          "externalId": "71e3549b-da92-4e5b-9684-468bd44dbfaa",
                          "type": null,
                          "name": "Heroes Inc",
                          "firstName": "Clark",
                          "lastName": "Kent",
                          "taxId": null,
                          "principleOfficerDoB": null,
                          "ssn": null,
                          "bankAccounts": [
                            {
                              "externalId": "c20c962e-3109-41a2-8bd4-91109d7f5007",
                              "erpIds": [],
                              "accountLabel": null,
                              "bankName": null,
                              "institutionNumber": null,
                              "iban": null,
                              "transitNumber": null,
                              "routingNumber": "021000021",
                              "accountNumber": "021000021765",
                              "countryCode": "US",
                              "currencyCode": "USD",
                              "accountType": "CHECKING",
                              "bic": null,
                              "balanceInfo": null,
                              "checkTemplateCodes": [],
                              "usageProfileIds": [],
                              "vccAccountPoolId": null,
                              "defaultAccount": false,
                              "defaultFor": [
                                "INTERNATIONAL_WIRE"
                              ],
                              "paymentDefaults": {
                                "purposeMessage": "Salary",
                                "purposeCode": "S0801"
                              }
                            },
                            {
                              "externalId": "971f8f33-02ef-4799-a574-a2b9a40d3569",
                              "erpIds": [],
                              "accountLabel": null,
                              "bankName": null,
                              "institutionNumber": null,
                              "iban": null,
                              "transitNumber": null,
                              "routingNumber": "021000021",
                              "accountNumber": "021000021765",
                              "countryCode": "CA",
                              "currencyCode": "USD",
                              "accountType": "CHECKING",
                              "bic": null,
                              "balanceInfo": null,
                              "checkTemplateCodes": [],
                              "usageProfileIds": [],
                              "vccAccountPoolId": null,
                              "defaultAccount": false,
                              "defaultFor": [
                                "ACH"
                              ]
                            }
                          ],
                          "phoneNumbers": [
                            {
                              "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                              "phoneNumber": "316-618-4107",
                              "types": [
                                "CONTACT",
                                "BUSINESS",
                                "PERSONAL"
                              ]
                            }
                          ],
                          "emails": [
                            {
                              "id": "4eb9ec0f-638a-4443-aee1-bfcc210cc425",
                              "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                              "email": "clark.kent@heroes.me",
                              "name": "Clark Kent",
                              "types": [
                                "PAYMENT"
                              ],
                              "defaultFor": [
                                "ECHECK"
                              ]
                            },
                            {
                              "id": "c4f8b23b-6025-46af-95d6-9c2e84504916",
                              "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                              "email": "clark.kent@heroes.me",
                              "name": "Clark Kent",
                              "types": [
                                "CONTACT"
                              ],
                              "defaultFor": [
                                "WIRE"
                              ]
                            }
                          ],
                          "availablePaymentMethods": [
                            "WIRE",
                            "ACH",
                            "CHECK"
                          ],
                          "addresses": [
                            {
                              "id": "ac6e0ccc-fc8d-4c3d-a3ba-68c9f6326267",
                              "externalId": null,
                              "line1": "1936 Sullivan Lane",
                              "line2": null,
                              "city": "New Trony",
                              "stateProvince": null,
                              "country": "US",
                              "postalCode": "44243",
                              "types": [
                                "PAYMENT",
                                "CONTACT"
                              ],
                              "defaultFor": [
                                "CHECK"
                              ]
                            }
                          ],
                          "fullContactName": "Clark Kent"
                        },
                        "batchInvoices": false,
                        "erpProvider": null,
                        "subjectOfPaymentRole": "VENDOR",
                        "invoiceBatchingSupported": false
                      }
                    ]
                  },
                  "page": {
                    "size": 1,
                    "totalElements": 1,
                    "totalPages": 1,
                    "number": 0
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Error Occurred",
                  "errors": [
                    {
                      "code": 100000,
                      "message": "Required String parameter 'name' is not present"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/config-api/vendors/{vendor_id}": {
      "get": {
        "tags": [
          "Counterparty (Payor or Payee)"
        ],
        "summary": "Read Counterparty",
        "description": "Viewing a single counterparty will return the saved counterparty information with the exception of bank sensitive\ninformation. This information is still available for FISPAN.\n\nWhen the request is successful, this enpoint will return `HTTP 200` a Counterparty. If the counterparty with the\ngiven identifier is not found, an `HTTP 404` will be returned with an [error object](#section/Unsuccessful-API-Call).",
        "operationId": "readCounterparty",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path-vendor-id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vendor"
                },
                "example": {
                  "id": "5d831ae0-807b-45a5-8e89-cfea92356a5e",
                  "externalId": "71e3549b-da92-4e5b-9684-468bd44dbfaa",
                  "subjectOfPayment": {
                    "externalId": "71e3549b-da92-4e5b-9684-468bd44dbfaa",
                    "type": null,
                    "name": "Heroes Inc",
                    "firstName": "Clark",
                    "lastName": "Kent",
                    "taxId": null,
                    "principleOfficerDoB": null,
                    "ssn": null,
                    "bankAccounts": [
                      {
                        "externalId": "c20c962e-3109-41a2-8bd4-91109d7f5007",
                        "erpIds": [],
                        "accountLabel": null,
                        "bankName": null,
                        "institutionNumber": null,
                        "iban": null,
                        "transitNumber": null,
                        "routingNumber": "021000021",
                        "accountNumber": "021000021765",
                        "countryCode": "US",
                        "currencyCode": "USD",
                        "accountType": "CHECKING",
                        "bic": null,
                        "balanceInfo": null,
                        "checkTemplateCodes": [],
                        "usageProfileIds": [],
                        "vccAccountPoolId": null,
                        "defaultAccount": false,
                        "defaultFor": [
                          "INTERNATIONAL_WIRE"
                        ],
                        "paymentDefaults": {
                          "purposeMessage": "Salary",
                          "purposeCode": "S0801"
                        }
                      },
                      {
                        "externalId": "971f8f33-02ef-4799-a574-a2b9a40d3569",
                        "erpIds": [],
                        "accountLabel": null,
                        "bankName": null,
                        "institutionNumber": null,
                        "iban": null,
                        "transitNumber": null,
                        "routingNumber": "021000021",
                        "accountNumber": "021000021765",
                        "countryCode": "CA",
                        "currencyCode": "USD",
                        "accountType": "CHECKING",
                        "bic": null,
                        "balanceInfo": null,
                        "checkTemplateCodes": [],
                        "usageProfileIds": [],
                        "vccAccountPoolId": null,
                        "defaultAccount": false,
                        "defaultFor": [
                          "ACH"
                        ]
                      }
                    ],
                    "phoneNumbers": [
                      {
                        "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                        "phoneNumber": "316-618-4107",
                        "types": [
                          "CONTACT",
                          "BUSINESS",
                          "PERSONAL"
                        ]
                      }
                    ],
                    "emails": [
                      {
                        "id": "4eb9ec0f-638a-4443-aee1-bfcc210cc425",
                        "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                        "email": "clark.kent@heroes.me",
                        "name": "Clark Kent",
                        "types": [
                          "PAYMENT"
                        ],
                        "defaultFor": [
                          "ECHECK"
                        ]
                      },
                      {
                        "id": "c4f8b23b-6025-46af-95d6-9c2e84504916",
                        "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                        "email": "clark.kent@heroes.me",
                        "name": "Clark Kent",
                        "types": [
                          "CONTACT"
                        ],
                        "defaultFor": [
                          "WIRE"
                        ]
                      }
                    ],
                    "availablePaymentMethods": [
                      "WIRE",
                      "ACH",
                      "CHECK"
                    ],
                    "addresses": [
                      {
                        "id": "ac6e0ccc-fc8d-4c3d-a3ba-68c9f6326267",
                        "externalId": null,
                        "line1": "1936 Sullivan Lane",
                        "line2": null,
                        "city": "New Trony",
                        "stateProvince": null,
                        "country": "US",
                        "postalCode": "44243",
                        "types": [
                          "PAYMENT",
                          "CONTACT"
                        ],
                        "defaultFor": [
                          "CHECK"
                        ]
                      }
                    ],
                    "fullContactName": "Clark Kent"
                  },
                  "batchInvoices": false,
                  "erpProvider": null,
                  "subjectOfPaymentRole": "VENDOR",
                  "invoiceBatchingSupported": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Not Found",
                  "errors": [
                    {
                      "code": 100404,
                      "message": "Unable to find Path : /vendors/1"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Counterparty (Payor or Payee)"
        ],
        "summary": "Update Counterparty",
        "description": "Using `HTTP Patch` method allow request to contain only part of Counterparty’s object. `NOTE` that\n`registeredPaymentMethods` won’t be updated with this request. Use [Counterparty Payment Methods](#tag/Counterparty-Payment-Methods)\nendpoints instead.\n\nWhen the request is successful, this enpoint will return `HTTP 200` with the patched Counterparty. If the counterparty with the\ngiven identifier is not found, an `HTTP 404` will be returned with an [error object](#section/Unsuccessful-API-Call).",
        "operationId": "updateCounterparty",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path-vendor-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vendor"
              },
              "example": {
                "subjectOfPayment": {
                  "name": "Heroes Inc",
                  "addresses": [
                    {
                      "id": "15d496e-92e1-4485-a17c-1bf632658ae6",
                      "city": "New Trony"
                    }
                  ],
                  "bankAccounts": [
                    {
                      "routingNumber": "021000021",
                      "accountNumber": "021000021765",
                      "accountType": "CHECKING",
                      "currencyCode": "USD",
                      "countryCode": "US",
                      "defaultFor": [
                        "WIRE"
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vendor"
                },
                "example": {
                  "id": "5d831ae0-807b-45a5-8e89-cfea92356a5e",
                  "externalId": "71e3549b-da92-4e5b-9684-468bd44dbfaa",
                  "subjectOfPayment": {
                    "externalId": "71e3549b-da92-4e5b-9684-468bd44dbfaa",
                    "type": null,
                    "name": "Heroes Inc",
                    "firstName": "Clark",
                    "lastName": "Kent",
                    "taxId": null,
                    "principleOfficerDoB": null,
                    "ssn": null,
                    "bankAccounts": [
                      {
                        "externalId": "c20c962e-3109-41a2-8bd4-91109d7f5007",
                        "erpIds": [],
                        "accountLabel": null,
                        "bankName": null,
                        "institutionNumber": null,
                        "iban": null,
                        "transitNumber": null,
                        "routingNumber": "021000021",
                        "accountNumber": "021000021765",
                        "countryCode": "US",
                        "currencyCode": "USD",
                        "accountType": "CHECKING",
                        "bic": null,
                        "balanceInfo": null,
                        "checkTemplateCodes": [],
                        "usageProfileIds": [],
                        "vccAccountPoolId": null,
                        "defaultAccount": false,
                        "defaultFor": [
                          "INTERNATIONAL_WIRE"
                        ],
                        "paymentDefaults": {
                          "purposeMessage": "Salary",
                          "purposeCode": "S0801"
                        }
                      },
                      {
                        "externalId": "971f8f33-02ef-4799-a574-a2b9a40d3569",
                        "erpIds": [],
                        "accountLabel": null,
                        "bankName": null,
                        "institutionNumber": null,
                        "iban": null,
                        "transitNumber": null,
                        "routingNumber": "021000021",
                        "accountNumber": "021000021765",
                        "countryCode": "CA",
                        "currencyCode": "USD",
                        "accountType": "CHECKING",
                        "bic": null,
                        "balanceInfo": null,
                        "checkTemplateCodes": [],
                        "usageProfileIds": [],
                        "vccAccountPoolId": null,
                        "defaultAccount": false,
                        "defaultFor": [
                          "ACH"
                        ]
                      }
                    ],
                    "phoneNumbers": [
                      {
                        "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                        "phoneNumber": "316-618-4107",
                        "types": [
                          "CONTACT",
                          "BUSINESS",
                          "PERSONAL"
                        ]
                      }
                    ],
                    "emails": [
                      {
                        "id": "4eb9ec0f-638a-4443-aee1-bfcc210cc425",
                        "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                        "email": "clark.kent@heroes.me",
                        "name": "Clark Kent",
                        "types": [
                          "PAYMENT"
                        ],
                        "defaultFor": [
                          "ECHECK"
                        ]
                      },
                      {
                        "id": "c4f8b23b-6025-46af-95d6-9c2e84504916",
                        "externalId": "a65d596e-90e1-4321-a17c-1bf623428ae1",
                        "email": "clark.kent@heroes.me",
                        "name": "Clark Kent",
                        "types": [
                          "CONTACT"
                        ],
                        "defaultFor": [
                          "WIRE"
                        ]
                      }
                    ],
                    "availablePaymentMethods": [
                      "WIRE",
                      "ACH",
                      "CHECK"
                    ],
                    "addresses": [
                      {
                        "id": "15d496e-92e1-4485-a17c-1bf632658ae6",
                        "externalId": null,
                        "line1": "1936 Sullivan Lane",
                        "line2": null,
                        "city": "New Trony",
                        "stateProvince": null,
                        "country": "US",
                        "postalCode": "44243",
                        "types": [
                          "PAYMENT",
                          "CONTACT"
                        ],
                        "defaultFor": [
                          "CHECK"
                        ]
                      }
                    ],
                    "fullContactName": "Clark Kent"
                  },
                  "batchInvoices": false,
                  "erpProvider": null,
                  "subjectOfPaymentRole": "VENDOR",
                  "invoiceBatchingSupported": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Not Found",
                  "errors": [
                    {
                      "code": 100404,
                      "message": "Unable to find Path : /vendors/1"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Counterparty (Payor or Payee)"
        ],
        "summary": "Delete Counterparty",
        "description": "Deletes from the database the counterparty with the id passed on the path parameter.\n\nWhen the request is successful, this enpoint will return `HTTP 204` with no content body. If the counterparty with the\ngiven identifier is not found, an `HTTP 404` will be returned with an [error object](#section/Unsuccessful-API-Call).",
        "operationId": "deleteCounterparty",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path-vendor-id"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Not Found",
                  "errors": [
                    {
                      "code": 100404,
                      "message": "Unable to find Path : /vendors/1"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/config-api/vendors/{vendor_id}/payment-methods": {
      "get": {
        "tags": [
          "Counterparty Payment Methods"
        ],
        "summary": "List All Counterparty’s Payment Methods",
        "description": "This endpoint lists all payment methods available for the given counterparty.\n\nWhen the request is successful, this enpoint will return `HTTP 200` and an array of payment methods found. If no\npayment methods are found, an `HTTP 200` with an empty list is returned.",
        "operationId": "listAllCounterpartyPaymentMethods",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path-vendor-id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array-of-payment-methods"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Not Found",
                  "errors": [
                    {
                      "code": 100404,
                      "message": "Unable to find Path : /vendors/1"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Counterparty Payment Methods"
        ],
        "summary": "Add Counterparty’s Payment Method",
        "description": "This endpoint adds a new payment method to the given counterparty.\n\nWhen the request is successful, this enpoint will return `HTTP 201` and the payment method created.",
        "operationId": "addCounterpartyPaymentMethod",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path-vendor-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ach"
                  },
                  {
                    "$ref": "#/components/schemas/wire"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ach"
                    },
                    {
                      "$ref": "#/components/schemas/wire"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/config-api/vendors/{vendor_id}/payment-methods/{type}": {
      "get": {
        "tags": [
          "Counterparty Payment Methods"
        ],
        "summary": "Read Counterparty’s Payment Method",
        "description": "This endpoint will read the Payment Method that matches the given `type` for the given `counterparty id`.\n\nWhen the request is successful, this enpoint will return `HTTP 200` and the payment method found. If no payment\nmethods are found, an `HTTP 404` will be returned with an [error object](#section/Unsuccessful-API-Call).",
        "operationId": "readCounterpartyPaymentMethod",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path-vendor-id"
          },
          {
            "$ref": "#/components/parameters/path-type"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ach"
                    },
                    {
                      "$ref": "#/components/schemas/wire"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Not Found",
                  "errors": [
                    {
                      "code": 100404,
                      "message": "Unable to find Path : /vendors/1/payment-methods/ach"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Counterparty Payment Methods"
        ],
        "summary": "Update Counterparty’s Payment Method",
        "description": "This endpoint will update the Payment Method that matches the given `type` for the given `counterparty id`.\nEven though a payment method’s sensitive data is not available for read it is still possible to update it.\n\nWhen the request is successful, this enpoint will return `HTTP 200` and the payment method found. If no payment\nmethods are found, an `HTTP 404` will be returned with an [error object](#section/Unsuccessful-API-Call).",
        "operationId": "updateCounterpartyPaymentMethod",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path-vendor-id"
          },
          {
            "$ref": "#/components/parameters/path-type"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ach"
                  },
                  {
                    "$ref": "#/components/schemas/wire"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ach"
                    },
                    {
                      "$ref": "#/components/schemas/wire"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Not Found",
                  "errors": [
                    {
                      "code": 100404,
                      "message": "Unable to find Path : /vendors/1/payment-methods/ach"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Counterparty Payment Methods"
        ],
        "summary": "Delete Counterparty’s Payment Method",
        "description": "This endpoint will delete the Payment Method that matches the given `type` for the given `counterparty id`.\n\nWhen the request is successful, this enpoint will return `HTTP 200` with no body.",
        "operationId": "deleteCounterpartyPaymentMethod",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path-vendor-id"
          },
          {
            "$ref": "#/components/parameters/path-type"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/history-service/payment-request-logs": {
      "get": {
        "tags": [
          "Get Payment Updates"
        ],
        "summary": "List Payment Request Logs",
        "description": "This endpoint retrieves the list of payment requests for the given counterpary sorted by `createdDate` in\ndescending order.\n\nWhen the request is successful, this enpoint will return `HTTP 200` and the list of payment requests. If no payment\nrequests are found, `HTTP 200` and an empty list will be returned.\n\n[Pagination](#tag/Pagination) is enabled for this request.",
        "operationId": "listPaymentRequestLogs",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/query-since"
          },
          {
            "$ref": "#/components/parameters/query-page"
          },
          {
            "$ref": "#/components/parameters/query-size"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Found payment requests"
                        }
                      }
                    },
                    {
                      "$ref": "#/components/schemas/embedded-array-of-payment-request-logs"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "page": {
                          "$ref": "#/components/schemas/page"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/config-api/webhooks": {
      "get": {
        "tags": [
          "Get Payment Updates"
        ],
        "summary": "List Webhooks",
        "description": "This endpoint lists all webhooks for a given client id\n\nWhen the Webhook is successfully registered an `HTTP 200` will be returned with a list of webhooks found. If no\nwebhooks are found, an `HTTP 200` with an empty list of webhooks will be returned.\n\n[Pagination](#tag/Pagination) is enabled for this request.",
        "operationId": "listWebhooks",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/query-client"
          },
          {
            "$ref": "#/components/parameters/query-page"
          },
          {
            "$ref": "#/components/parameters/query-size"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/embedded-array-of-webhooks"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "page": {
                          "$ref": "#/components/schemas/page"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Get Payment Updates"
        ],
        "summary": "Register a Webhook",
        "description": "Registers a Webhook on FISPAN's platform.\n\nWhen the Webhook is successfully registered an `HTTP 201` will be returned with the Webhook id.",
        "operationId": "registerWebhook",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook"
              },
              "example": {
                "signingSecret": "LV6XXD7rAmALjpFhZVMdWw3tuFUx9eAK",
                "events": [
                  "PAYMENT.ALL"
                ],
                "urls": [
                  "http://example.com/webhooks"
                ],
                "client": {
                  "id": "5bbbb238-9ba4-42e5-b767-0e0c84dfeff5"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                },
                "example": {
                  "id": "61af493c-286c-4c0d-9ae1-fe39a14c9543",
                  "events": [
                    "PAYMENT.ALL"
                  ],
                  "urls": [
                    "http://example.com/webhooks"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/config-api/webhooks/{webhook_id}": {
      "patch": {
        "tags": [
          "Get Payment Updates"
        ],
        "summary": "Update Webhook",
        "description": "Upates a Webhook on FISPAN's platform.\n\n`NOTE`: Client.id can’t be updated if present request will fail with `HTTP 400 - Bad Request`\n\nWhen the Webhook is successfully updated an `HTTP 200` will be returned with the Webhook id.",
        "operationId": "updateWebhook",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path-webhook-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook"
              },
              "example": {
                "signingSecret": "LV6XXD7rAmALjpFhZVMdWw3tuFUx9eAK",
                "events": [
                  "PAYMENT.ALL"
                ],
                "urls": [
                  "http://example.com/webhooks"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                },
                "example": {
                  "id": "61af493c-286c-4c0d-9ae1-fe39a14c9543",
                  "events": [
                    "PAYMENT.ALL"
                  ],
                  "urls": [
                    "http://example.com/webhooks"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Validation Error",
                  "errors": [
                    {
                      "code": 100002,
                      "message": "Webhook's Client can't be updated"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Get Payment Updates"
        ],
        "summary": "Delete Webhook",
        "description": "Deletes a Webhook on FISPAN's platform.\n\nWhen the Webhook is successfully deleted an `HTTP 204` will be returned.",
        "operationId": "deleteWebhook",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path-webhook-id"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/erp-connector/vendors/{vendor_id}/payment-requests": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get All Counterparty’s Payment Requests",
        "description": "This endpoint retrieves the list of payment requests for the given counterpary sorted by `createdDate` in\ndescending order.\n\nWhen the request is successful, this enpoint will return `HTTP 200` and the list of payment requests. If no payment\nrequests are found, `HTTP 200` and an empty list will be returned.\n\n[Pagination](#tag/Pagination) is enabled for this request.",
        "operationId": "getAllCounterpartyPaymentRequests",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path-vendor-id"
          },
          {
            "$ref": "#/components/parameters/query-page"
          },
          {
            "$ref": "#/components/parameters/query-size"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/embedded-array-of-payment-requests"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "page": {
                          "$ref": "#/components/schemas/page"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Make a Payment Request",
        "description": "This endpoint creates a payment request for the given counterparty.\n\nWhen the request is successful, this enpoint will return `HTTP 201` and the payment request created.",
        "operationId": "makePaymentRequest",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path-vendor-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/payment-request"
              },
              "examples": {
                "ACH": {
                  "value": {
                    "externalId": "71e3549b-da92-4e5b-9684-468bd44dbfdb",
                    "paymentMethodType": "ach",
                    "amount": 55000,
                    "currency": "USD",
                    "purpose": "payment for AWS",
                    "clientAccountId": "aecc7964-811c-4cf3-ad75-53b329a45ff3",
                    "clientAccountUsageProfileId": "134567"
                  }
                },
                "Fedwire": {
                  "value": {
                    "externalId": "71e3549b-da92-4e5b-9684-468bd44dbfdb",
                    "paymentMethodType": "wire",
                    "amount": 55000,
                    "currency": "USD",
                    "purpose": "payment for AWS",
                    "clientAccountId": "aecc7964-811c-4cf3-ad75-53b329a45ff3",
                    "clientAccountUsageProfileId": "134567"
                  }
                },
                "Checkprint": {
                  "value": {
                    "externalId": "71e3549b-da92-4e5b-9684-468bd44dbfdb",
                    "paymentMethodType": "check",
                    "amount": 55000,
                    "currency": "USD",
                    "purpose": "payment for AWS",
                    "clientAccountId": "aecc7964-811c-4cf3-ad75-53b329a45ff3",
                    "clientAccountUsageProfileId": "134567"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment-request"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Not Found",
                  "errors": [
                    {
                      "code": 100404,
                      "message": "Unable to find Path : /vendors/1/payment-requests"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/erp-connector/vendors/{vendor_id}/payment-requests/{payment_request_id}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get Payment Request",
        "description": "This endpoint retrieves a payment request for the given counterparty with the given payment request identifier.\n\nWhen the request is successful, this enpoint will return `HTTP 200` and the payment request found. If the payment\nrequest is not found, it will return a `HTTP 404` with an error.",
        "operationId": "getPaymentRequest",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path-vendor-id"
          },
          {
            "$ref": "#/components/parameters/path-payment-request-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment-request"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Not Found",
                  "errors": [
                    {
                      "code": 100404,
                      "message": "Unable to find Path : /vendors/1/payment-requests/1"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/erp-connector/clients/{client_id}/vendors/{vendor_id}/payment-requests/{payment_request_id}": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Cancel or Retry Payment Request",
        "description": "This endpoint cancels an existing payment request for the given client and counterparty.\n\nWhen the request is successful, this enpoint will return `HTTP 200`",
        "operationId": "cancelOrRetryPaymentRequest",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path-client-id"
          },
          {
            "$ref": "#/components/parameters/path-vendor-id"
          },
          {
            "$ref": "#/components/parameters/path-payment-request-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/payment-action"
              },
              "examples": {
                "Cancel": {
                  "value": {
                    "action": "CANCEL",
                    "async": false
                  }
                },
                "Retry": {
                  "value": {
                    "action": "RETRY"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment-action"
                },
                "examples": {
                  "Cancel": {
                    "value": {
                      "action": "CANCEL",
                      "async": false,
                      "status": "COMPLETED"
                    }
                  },
                  "Retry": {
                    "value": {
                      "action": "RETRY",
                      "status": "ACCEPTED"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Validation Error",
                  "errors": [
                    {
                      "code": 100002,
                      "message": "Couldn't find corresponding payment request"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Not Found",
                  "errors": [
                    {
                      "code": 100404,
                      "message": "Unable to find Path : /vendors/1/payment-requests"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Error Occurred",
                  "errors": [
                    {
                      "code": 100000,
                      "message": "fintech-connector: Temporary failure in name resolution"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/erp-connector/payment-requests": {
      "post": {
        "tags": [
          "Payments (Subject of Payment Method)"
        ],
        "summary": "Make a Payment Request",
        "description": "This endpoint creates a payment request. This payment request can be either a normal payment request\nor an Account to Account (A2A) transfer. Please, refer to the code samples to see the expected differences\nin Requests and Responses\n\nWhen the request is successful, this enpoint will return `HTTP 201` and the payment request created or the A2A\ntransfer is created in the system.",
        "operationId": "makePaymentRequestSubjectOfPayment",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/erp-payment-request"
              },
              "examples": {
                "Payment Request": {
                  "value": {
                    "clientTxId": "clientTxId",
                    "erpProvider": "DUMMY",
                    "subjectOfPayment": {
                      "externalId": "externalId",
                      "name": "Five Stars Bank",
                      "registeredPaymentMethods": [
                        {
                          "type": "ach",
                          "achInfo": {
                            "accountNumber": "312312312",
                            "routingNumber": "121122676",
                            "accountType": "CHECKING"
                          }
                        },
                        {
                          "type": "emt",
                          "email": "email@email.com"
                        }
                      ],
                      "address": {
                        "line1": "My Street Address",
                        "city": "My City",
                        "stateProvince": "My State",
                        "country": "My Country",
                        "postalCode": "My Postal Code"
                      },
                      "email": "email@email.com"
                    },
                    "amount": 1234,
                    "currency": "USD"
                  }
                },
                "Account to Account Transfer": {
                  "value": {
                    "externalId": "698",
                    "clientTxId": "296",
                    "paymentMethodType": "A2A_TRANSFER",
                    "amount": 2,
                    "currency": "USD",
                    "sourceAccountId": "f8c279a7-2be3-4d1e-8aa1-0e7595fcbf42",
                    "clientAccountUsageProfileId": "1258039",
                    "purpose": "AWS bill",
                    "destinationAccountId": "a86ab50c-0521-472f-b5a6-68467349c17d"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/erp-payment-request"
                },
                "examples": {
                  "Payment Request": {
                    "value": {
                      "id": "741c1349-e111-4fff-96fd-6eaa27ef3a4b",
                      "externalId": null,
                      "erpProvider": "NONE",
                      "status": "RECEIVED",
                      "fulfillmentStartDate": null,
                      "clientId": "46e4d39f-7940-4421-947e-319342976a7e",
                      "clientTxId": "9bcace74-768e-4634-8f35-1efa9f45b77e",
                      "paymentMethodType": null,
                      "clientAccountId": "ae3e3abb-eb0a-4663-8c1a-250d5146ea64",
                      "clientAccountUsageProfileId": "profile1",
                      "sourceAccountId": null,
                      "sourceAccountUsageProfileId": null,
                      "currency": "USD",
                      "amount": 1234,
                      "fx": null,
                      "vendorId": "5e6a8fb1-6349-46a8-907a-23ebe6003463",
                      "purpose": null,
                      "error": null,
                      "statusMessages": null,
                      "serviceProviderId": "701ea466-86f9-4fbf-ad2a-a4a5a87f4410",
                      "details": null,
                      "reconcileDetails": [],
                      "hasAttachments": false,
                      "safetyHoldApplied": false,
                      "invoices": [
                        {
                          "invoiceId": "INV-001",
                          "billId": "BILL-001",
                          "postingDate": "2018-11-01",
                          "purpose": "Test invoice INV-001",
                          "invoicedAmount": {
                            "currencyCode": "USD",
                            "amount": 1550
                          },
                          "discountAppliedAmount": {
                            "currencyCode": "USD",
                            "amount": 150
                          },
                          "remittedAmount": {
                            "currencyCode": "USD",
                            "amount": 1400
                          },
                          "purchaseOrders": [],
                          "name": null,
                          "grossAmount": null,
                          "excluded": null,
                          "commission": null,
                          "percentage": null,
                          "billingAddress": null
                        },
                        {
                          "invoiceId": "INV-002",
                          "billId": "BILL-002",
                          "postingDate": "2018-11-15",
                          "purpose": "Test invoice INV-002",
                          "invoicedAmount": {
                            "currencyCode": "USD",
                            "amount": 2550
                          },
                          "discountAppliedAmount": {
                            "currencyCode": "USD",
                            "amount": 250
                          },
                          "remittedAmount": {
                            "currencyCode": "USD",
                            "amount": 2400
                          },
                          "purchaseOrders": [],
                          "name": null,
                          "grossAmount": null,
                          "excluded": null,
                          "commission": null,
                          "percentage": null,
                          "billingAddress": null
                        }
                      ],
                      "meta": null,
                      "paymentDirection": "CREDIT",
                      "vendorAddressId": null,
                      "vendorBankAccountId": null,
                      "destinationAccountId": null,
                      "createdDate": "2022-02-08T18:02:12.251+0000"
                    }
                  },
                  "Account to Account Transfer": {
                    "value": {
                      "id": "bc24bb4f-0b46-4b0a-a00b-ed7d59694088",
                      "externalId": "698",
                      "erpProvider": "NONE",
                      "status": "RECEIVED",
                      "fulfillmentStartDate": null,
                      "clientId": "bb09e9dc-c032-432a-9365-293ba1a66583",
                      "clientTxId": "296",
                      "paymentMethodType": "A2A_TRANSFER",
                      "clientAccountId": "f8c279a7-2be3-4d1e-8aa1-0e7595fcbf42",
                      "clientAccountUsageProfileId": "1258039",
                      "sourceAccountId": "f8c279a7-2be3-4d1e-8aa1-0e7595fcbf42",
                      "sourceAccountUsageProfileId": null,
                      "currency": "USD",
                      "amount": 2,
                      "fx": null,
                      "vendorId": "bb09e9dc-c032-432a-9365-293ba1a66583",
                      "purpose": "AWS bill",
                      "error": null,
                      "statusMessages": null,
                      "serviceProviderId": "280eb870-8321-49db-a110-f5b43d1fe204",
                      "details": null,
                      "reconcileDetails": [],
                      "hasAttachments": false,
                      "safetyHoldApplied": false,
                      "invoices": null,
                      "meta": null,
                      "paymentDirection": "CREDIT",
                      "vendorAddressId": null,
                      "vendorBankAccountId": null,
                      "destinationAccountId": "a86ab50c-0521-472f-b5a6-68467349c17d",
                      "createdDate": "2022-02-08T18:58:57.052+0000"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Not Found",
                  "errors": [
                    {
                      "code": 100404,
                      "message": "Unable to find Path : /vendors/1/payment-requests"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts-info/bank-accounts/{account_id}/transactions": {
      "get": {
        "tags": [
          "Balance & Transactions"
        ],
        "summary": "Read Transactions",
        "description": "This endpoint will Return list of transactions `200` is successful HTTP status code.\n\nThe transactions are listed in `settleDate` descending order by default.\n\n[Pagination](#tag/Pagination) is enabled for this request.",
        "operationId": "readTransactionsByAccountId",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/query-page"
          },
          {
            "$ref": "#/components/parameters/query-size"
          },
          {
            "$ref": "#/components/parameters/query-from-date"
          },
          {
            "$ref": "#/components/parameters/query-to-date"
          },
          {
            "$ref": "#/components/parameters/path-account-id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/embedded-array-of-transactions"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "error": "unauthorized",
                  "error_description": "Full authentication is required to access this resource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-2"
                },
                "example": {
                  "id": "0ef325d3-5d06-4e1e-948e-d2e4ea50b0e8",
                  "timestamp": "2021-09-22T15:21:24.626356Z",
                  "message": "Unauthorized",
                  "errors": [
                    {
                      "code": 100403,
                      "message": "Access is denied"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "HTTP Basic": {
        "type": "http",
        "scheme": "basic"
      },
      "Bearer Token": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "parameters": {
      "query-grant-type": {
        "name": "grant_type",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "client_credentials"
          ],
          "default": "client_credentials"
        },
        "required": true,
        "description": "Type of grant requested, value ‘client_credentials’ for OAuth2.0 resource owner flow.\n"
      },
      "path-account-id": {
        "name": "account_id",
        "in": "path",
        "schema": {
          "type": "string",
          "format": "uuid",
          "minLength": 36,
          "maxLength": 36
        },
        "required": true,
        "description": "The UUID identification of the account to be used.\n"
      },
      "query-page": {
        "name": "page",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 1
        },
        "description": "The number of the page to extract\n"
      },
      "query-size": {
        "name": "size",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 20
        },
        "description": "The number of items on the page.\n"
      },
      "query-for": {
        "name": "for",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "A string that will be used to search records on the database.\n\nE.g. if you want to search by the name Tesla, this will be passed as `for=Tesla`.\n"
      },
      "query-name": {
        "name": "name",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "A name that will be used to search records on the database.\n\nE.g. if you want to search by the name Tesla, this will be passed as `name=Tesla`.\n"
      },
      "path-vendor-id": {
        "name": "vendor_id",
        "in": "path",
        "schema": {
          "type": "string",
          "format": "uuid",
          "minLength": 36,
          "maxLength": 36
        },
        "required": true,
        "description": "The UUID identification of the counterparty to be used.\n"
      },
      "path-type": {
        "name": "type",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "The type to be used on the search.\n"
      },
      "query-since": {
        "name": "since",
        "in": "query",
        "schema": {
          "type": "string",
          "format": "date-time"
        },
        "required": true,
        "description": "[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) date time since last poll\n"
      },
      "query-client": {
        "name": "client.id",
        "in": "query",
        "schema": {
          "type": "string",
          "format": "uuid",
          "minLength": 36,
          "maxLength": 36
        },
        "description": "The UUID identification of the client to be used.\n"
      },
      "path-webhook-id": {
        "name": "webhook_id",
        "in": "path",
        "schema": {
          "type": "string",
          "format": "uuid",
          "minLength": 36,
          "maxLength": 36
        },
        "required": true,
        "description": "The UUID identification of the webhook to be used.\n"
      },
      "path-payment-request-id": {
        "name": "payment_request_id",
        "in": "path",
        "schema": {
          "type": "string",
          "format": "uuid",
          "minLength": 36,
          "maxLength": 36
        },
        "required": true,
        "description": "The UUID identification of the counterparty to be used.\n"
      },
      "path-client-id": {
        "name": "client_id",
        "in": "path",
        "schema": {
          "type": "string",
          "format": "uuid",
          "minLength": 36,
          "maxLength": 36
        },
        "required": true,
        "description": "The UUID identification of the client to be used.\n"
      },
      "query-from-date": {
        "name": "fromDate",
        "in": "query",
        "schema": {
          "type": "string",
          "format": "date"
        },
        "description": "The date from which records should be returned. Should be formated as `yyyy-MM-dd`\n"
      },
      "query-to-date": {
        "name": "toDate",
        "in": "query",
        "schema": {
          "type": "string",
          "format": "date"
        },
        "description": "The date to which records should be returned. Should be formated as `yyyy-MM-dd`\n"
      }
    },
    "schemas": {
      "auth-token": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "example": "261e80be-58e1-4ecf-8f24-c1cc3f8ff168",
            "description": "`access_token` required for all other API calls\n"
          },
          "token_type": {
            "type": "string",
            "example": "bearer",
            "description": "The type of the token.\n"
          },
          "expires_in": {
            "type": "integer",
            "example": 1800,
            "description": "`access_token`’s expiration time in seconds\n"
          },
          "scope": {
            "type": "string",
            "example": "read write",
            "description": "The scope of the generated token.\n"
          }
        }
      },
      "error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "unsupported_grant_type",
            "description": "The name of the error.\n"
          },
          "error_description": {
            "type": "string",
            "example": "Unsupported grant type",
            "description": "The description of the error\n"
          }
        }
      },
      "erp-provider": {
        "type": "string",
        "enum": [
          "FRESHBOOKS",
          "INTACCT",
          "MYOB",
          "NAVISION",
          "NETSUITE",
          "NONE",
          "ORACLE",
          "QUICKBOOKS",
          "QUICKBOOKS_DESKTOP",
          "SAGE50",
          "SAGE_FABRIC",
          "SAP",
          "SAP_BY_DESIGN",
          "MS_BUSINESS_CENTRAL",
          "MS_BUSINESS_CENTRAL_ONPREM_14",
          "TEST_ERP",
          "UNKNOWN",
          "XERO"
        ],
        "description": "FISPAN's accepted ERP Providers."
      },
      "erp-id": {
        "type": "object",
        "description": "ERP identifier in FISPAN's platform",
        "properties": {
          "id": {
            "type": "string",
            "description": "Read only ERP identifier"
          },
          "erpProvider": {
            "$ref": "#/components/schemas/erp-provider"
          }
        }
      },
      "array-of-erp-ids": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/erp-id"
        },
        "minItems": 0,
        "description": "A list of valid ERP ids for this bank account.",
        "example": [
          {
            "id": "e4a8b00d-14d5-46f4-90f5-95fe0bd37566",
            "erpProvider": "FRESHBOOKS"
          }
        ]
      },
      "balance-daily": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "The id of the request associated with the daily balance"
          },
          "ledgerBalance": {
            "type": "number",
            "format": "float",
            "description": "The ledger balance associated with the daily balance"
          },
          "availableBalance": {
            "type": "number",
            "format": "float",
            "description": "The available balance for the day."
          },
          "lastUpdatedLedgerBalance": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the ledger balance was last updated. The value format is `yyyy-MM-ddTHH:mm:ss.SSSZ`"
          },
          "lastUpdatedAvailableBalance": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the available balance was last updated. The value format is `yyyy-MM-ddTHH:mm:ss.SSSZ`"
          }
        }
      },
      "balances": {
        "type": "object",
        "description": "Object containing current day and previous day balance",
        "properties": {
          "currentDay": {
            "$ref": "#/components/schemas/balance-daily"
          },
          "previousDay": {
            "$ref": "#/components/schemas/balance-daily"
          }
        },
        "example": {
          "currentDay": {
            "requestId": null,
            "ledgerBalance": 5891.05,
            "availableBalance": 9552.61,
            "lastUpdatedLedgerBalance": "2020-01-04T00:20:02.744Z",
            "lastUpdatedAvailableBalance": "2020-01-04T00:20:02.744Z"
          },
          "previousDay": {
            "requestId": null,
            "ledgerBalance": 9369.52,
            "availableBalance": 9024.65,
            "lastUpdatedLedgerBalance": "2020-01-04T00:20:02.744Z",
            "lastUpdatedAvailableBalance": "2020-01-04T00:20:02.744Z"
          }
        }
      },
      "balance": {
        "type": "object",
        "properties": {
          "bankAccountId": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "The id of Bank Account the balance is associated with."
          },
          "overdraftLimit": {
            "type": "number",
            "description": "Overdraft limit available for the account"
          },
          "clientId": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "The id of the client the balance is associated with."
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when account’s balance was last updated. The value format is `yyyy-MM-ddTHH:mm:ss.SSSZ`"
          },
          "tracerId": {
            "type": "string",
            "description": "Used to link this request to OutboundApiRequest"
          },
          "balances": {
            "$ref": "#/components/schemas/balances"
          },
          "requestId": {
            "type": "string",
            "description": "The id associated with the request"
          },
          "ledgerBalance": {
            "type": "number",
            "format": "float",
            "description": "The current balance of bank account including pending transactions"
          },
          "availableBalance": {
            "type": "number",
            "format": "float",
            "description": "The current available balance on bank account"
          },
          "lastUpdatedLedgerBalance": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the ledger balance was last updated. The value format is `yyyy-MM-ddTHH:mm:ss.SSSZ`"
          },
          "lastUpdatedAvailableBalance": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the available balance was last updated. The value format is `yyyy-MM-ddTHH:mm:ss.SSSZ`"
          }
        },
        "example": {
          "bankAccountId": "1cf5bb90-014d-4fa8-b76c-80aeac5e3877",
          "overdraftLimit": 6836.72,
          "clientId": "616f6dfc-c56c-42ad-98ae-5e62001516bf",
          "lastUpdated": "2020-01-04T00:20:02.744Z",
          "tracerId": null,
          "balances": {
            "currentDay": {
              "requestId": null,
              "ledgerBalance": 5891.05,
              "availableBalance": 9552.61,
              "lastUpdatedLedgerBalance": "2020-01-04T00:20:02.744Z",
              "lastUpdatedAvailableBalance": "2020-01-04T00:20:02.744Z"
            },
            "previousDay": {
              "requestId": null,
              "ledgerBalance": 9369.52,
              "availableBalance": 9024.65,
              "lastUpdatedLedgerBalance": "2020-01-04T00:20:02.744Z",
              "lastUpdatedAvailableBalance": "2020-01-04T00:20:02.744Z"
            }
          }
        }
      },
      "usage-profile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The usage profile id to be used."
          },
          "label": {
            "type": "string",
            "description": "The usage profile label to be used."
          }
        }
      },
      "payment-type": {
        "type": "string",
        "description": "FISPAN's accepted payment types.",
        "enum": [
          "ACH",
          "CHECK",
          "CPA",
          "EMT",
          "RTP",
          "VCC",
          "WIRE",
          "ECHECK"
        ]
      },
      "array-of-payment-types": {
        "type": "array",
        "description": "The list of payment types.",
        "items": {
          "$ref": "#/components/schemas/payment-type"
        }
      },
      "bank-account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "Read only account UUID.\n"
          },
          "externalId": {
            "type": "string",
            "description": "Bank specific account id\n"
          },
          "erpIds": {
            "$ref": "#/components/schemas/array-of-erp-ids"
          },
          "accountLabel": {
            "type": "string",
            "description": "Label used to identify account e.g `Cheque`.\n"
          },
          "bankName": {
            "type": "string",
            "description": "The name of the bank where the account was opened.\n"
          },
          "accountNumber": {
            "type": "string",
            "description": "Required for both US and Canadian bank accounts. [This field is masked](#tag/Masking-Sentive-Data).\n"
          },
          "routingNumber": {
            "type": "string",
            "description": "Required for US bank accounts. [This field is masked](#tag/Masking-Sentive-Data).\n"
          },
          "accountType": {
            "type": "string",
            "description": "Required for US bank accounts.\n"
          },
          "institutionNumber": {
            "type": "string",
            "description": "Required for Canadian bank accounts.\n"
          },
          "transitNumber": {
            "type": "string",
            "description": "Required for Canadian bank accounts.\n"
          },
          "countryCode": {
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "description": "Branch [ISO two-letter country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)\n"
          },
          "currencyCode": {
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "description": "Account’s [ISO currency three-letter code](https://en.wikipedia.org/wiki/ISO_4217#Active_codes)\n"
          },
          "bic": {
            "type": "string",
            "description": "Bank branch identifier."
          },
          "balanceInfo": {
            "$ref": "#/components/schemas/balance"
          },
          "checkTemplateCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Check template ID (provided by your bank), needed for physical check payments"
          },
          "usageProfileIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/usage-profile"
            },
            "description": "Usage profile id’s if needed for your bank account.\n```json\n[\n  {\n    \"id\": \"string\",\n    \"label\": \"string\"\n  }\n]\n```\n"
          },
          "vccAccountPoolId": {
            "type": "string",
            "description": "Virtual credit card pool id(provided by your bank), needed for VCC payments"
          },
          "defaultAccount": {
            "type": "boolean",
            "description": "Marks a default account. If no account specified in the payment request, an account with defaultAccount set to\n'true’ will be used. Only one default account per Subject of Payment.\n"
          },
          "defaultFor": {
            "$ref": "#/components/schemas/array-of-payment-types"
          }
        },
        "example": {
          "id": "e4a8b00d-14d5-46f4-90f5-95fe0bd37566",
          "externalId": null,
          "erpIds": [
            {
              "id": "30d275f6-06e4-4dcd-be82-30b3bdda8f5b",
              "erpProvider": "FRESHBOOKS"
            }
          ],
          "accountLabel": "Savings",
          "bankName": "Five States Bank",
          "institutionNumber": "123456",
          "transitNumber": "02",
          "routingNumber": "*********",
          "accountNumber": "*********7935",
          "countryCode": "US",
          "currencyCode": "USD",
          "accountType": "SAVINGS",
          "bic": null,
          "balanceInfo": {
            "bankAccountId": "1cf5bb90-014d-4fa8-b76c-80aeac5e3877",
            "overdraftLimit": 6836.72,
            "clientId": "616f6dfc-c56c-42ad-98ae-5e62001516bf",
            "lastUpdated": "2020-01-04T00:20:02.744Z",
            "tracerId": null,
            "balances": {
              "currentDay": {
                "requestId": null,
                "ledgerBalance": 5891.05,
                "availableBalance": 9552.61,
                "lastUpdatedLedgerBalance": "2020-01-04T00:20:02.744Z",
                "lastUpdatedAvailableBalance": "2020-01-04T00:20:02.744Z"
              },
              "previousDay": {
                "requestId": null,
                "ledgerBalance": 9369.52,
                "availableBalance": 9024.65,
                "lastUpdatedLedgerBalance": "2020-01-04T00:20:02.744Z",
                "lastUpdatedAvailableBalance": "2020-01-04T00:20:02.744Z"
              }
            }
          },
          "checkTemplateCodes": [],
          "usageProfileIds": [],
          "vccAccountPoolId": null,
          "defaultAccount": true,
          "defaultFor": [
            "ACH",
            "ECHECK"
          ]
        },
        "required": [
          "accountLabel"
        ]
      },
      "array-of-bank-accounts": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/bank-account"
        },
        "minItems": 0
      },
      "error-2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The error identifier."
          },
          "timestamp": {
            "type": "string",
            "description": "The error timestamp in the format `yyyy-MM-dd&HH:mm:ss.SSSSSS`."
          },
          "message": {
            "type": "string",
            "description": "A message indicating the error."
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The [error code](#tag/FISPAN-Errors)"
                },
                "message": {
                  "type": "string",
                  "description": "More explanation of the error."
                }
              }
            }
          }
        }
      },
      "address": {
        "type": "object",
        "properties": {
          "line1": {
            "type": "string",
            "description": "The line 1 for the address."
          },
          "line2": {
            "type": "string",
            "description": "The line 2 for the address."
          },
          "city": {
            "type": "string",
            "description": "The city of the address."
          },
          "province": {
            "type": "string",
            "description": "The province of the address."
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code of the address."
          }
        },
        "example": {
          "line1": "1936 Sullivan Lane",
          "line2": null,
          "city": "New Trony",
          "province": "NY",
          "postalCode": "44243"
        }
      },
      "base-payment-method": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the payment.",
            "enum": [
              "ach",
              "wire",
              "e-check",
              "emt"
            ]
          }
        }
      },
      "e-check": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base-payment-method"
          },
          {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "The email to which digital check should be delivered."
              },
              "name": {
                "type": "string",
                "description": "name to be printed on the check. If not provided, we use name (`vendor.name`) of the counterparty instead"
              }
            }
          }
        ],
        "required": [
          "type",
          "email"
        ],
        "example": {
          "type": "emt",
          "email": "email@email.com"
        }
      },
      "common-payment-method-fields": {
        "type": "object",
        "properties": {
          "routingNumber": {
            "type": "string",
            "description": "The routing number of bank branch."
          },
          "accountNumber": {
            "type": "string",
            "description": "The Bank account number."
          },
          "accountType": {
            "type": "string",
            "description": "The bank account type.",
            "enum": [
              "CHECKING",
              "SAVINGS",
              "BUSINESS"
            ]
          }
        },
        "required": [
          "routingNumber",
          "accountNumber",
          "accountType"
        ]
      },
      "ach": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base-payment-method"
          },
          {
            "type": "object",
            "properties": {
              "achInfo": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/common-payment-method-fields"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "countryCode": {
                        "type": "string",
                        "minLength": 2,
                        "maxLength": 2,
                        "description": "[ISO two-letter country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)"
                      },
                      "currencyCode": {
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 3,
                        "description": "[ISO currency three-letter code](https://en.wikipedia.org/wiki/ISO_4217#Active_codes)"
                      }
                    }
                  }
                ]
              }
            }
          }
        ],
        "required": [
          "type",
          "achInfo"
        ],
        "example": {
          "type": "ach",
          "achInfo": {
            "routingNumber": "021000021",
            "accountNumber": "021000021765",
            "accountType": "CHECKING",
            "currencyCode": "USD",
            "countryCode": "US"
          }
        }
      },
      "wire": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base-payment-method"
          },
          {
            "type": "object",
            "properties": {
              "wireInfo": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/common-payment-method-fields"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "countryCode": {
                        "type": "string",
                        "minLength": 2,
                        "maxLength": 2,
                        "description": "[ISO two-letter country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)"
                      },
                      "currencyCode": {
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 3,
                        "description": "[ISO currency three-letter code](https://en.wikipedia.org/wiki/ISO_4217#Active_codes)"
                      }
                    }
                  }
                ]
              }
            }
          }
        ],
        "required": [
          "type",
          "wireInfo"
        ],
        "example": {
          "type": "wire",
          "wireInfo": {
            "routingNumber": "021000021",
            "accountNumber": "021000021765",
            "accountType": "CHECKING",
            "currencyCode": "USD",
            "countryCode": "US"
          }
        }
      },
      "emt": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base-payment-method"
          },
          {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "The email to send the payment to."
              }
            }
          }
        ],
        "required": [
          "type",
          "email"
        ],
        "example": {
          "type": "emt",
          "email": "email@email.com"
        }
      },
      "payment-method": {
        "type": "object",
        "anyOf": [
          {
            "$ref": "#/components/schemas/e-check"
          },
          {
            "$ref": "#/components/schemas/ach"
          },
          {
            "$ref": "#/components/schemas/wire"
          },
          {
            "$ref": "#/components/schemas/emt"
          }
        ]
      },
      "array-of-payment-methods": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/payment-method"
        },
        "minItems": 0,
        "example": [
          {
            "type": "ach",
            "achInfo": {
              "routingNumber": "021000021",
              "accountNumber": "021000021765",
              "accountType": "CHECKING"
            }
          },
          {
            "type": "wire",
            "wireInfo": {
              "routingNumber": "021000021",
              "accountNumber": "021000021765",
              "accountType": "CHECKING",
              "currencyCode": "USD",
              "countryCode": "US"
            }
          }
        ]
      },
      "currency-and-amount": {
        "type": "object",
        "description": "Object containing the currency and the amount of a value",
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "[ISO currency three-letter code](https://en.wikipedia.org/wiki/ISO_4217#Active_codes)\n"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "The amount."
          }
        }
      },
      "purchased-order": {
        "type": "object",
        "properties": {
          "poId": {
            "type": "string",
            "description": "The purchased order identifier"
          },
          "postingDate": {
            "type": "string",
            "description": "The date when the purchased order was posted",
            "format": "date"
          },
          "purpose": {
            "type": "string",
            "description": "The purpose of the purchased order"
          },
          "purchaseTotal": {
            "$ref": "#/components/schemas/currency-and-amount"
          }
        }
      },
      "array-of-purchased-orders": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/purchased-order"
        },
        "minItems": 0
      },
      "invoice": {
        "type": "object",
        "properties": {
          "invoiceId": {
            "type": "string",
            "description": "The invoice identifier."
          },
          "billId": {
            "type": "string",
            "description": "The bill identifier"
          },
          "postingDate": {
            "type": "string",
            "description": "The date when the invoice was posted",
            "format": "date"
          },
          "purpose": {
            "type": "string",
            "description": "The purpose of the invoice"
          },
          "invoicedAmount": {
            "$ref": "#/components/schemas/currency-and-amount"
          },
          "discountAppliedAmount": {
            "$ref": "#/components/schemas/currency-and-amount"
          },
          "remittedAmount": {
            "$ref": "#/components/schemas/currency-and-amount"
          },
          "purchasedOrders": {
            "$ref": "#/components/schemas/array-of-purchased-orders"
          },
          "name": {
            "type": "string",
            "description": "The name on the invoice"
          },
          "grossAmount": {
            "type": "number",
            "description": "The invoice gross amount",
            "format": "float"
          },
          "excluded": {
            "type": "number",
            "description": "The value excluded from the invoice.",
            "format": "float"
          },
          "comission": {
            "type": "number",
            "description": "The comission value on the invoice.",
            "format": "float"
          },
          "percentage": {
            "type": "number",
            "description": "The percentage value on the invoice.",
            "format": "float"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/address"
          }
        }
      },
      "array-of-invoices": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/invoice"
        },
        "minItems": 0
      },
      "subject-of-payment": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Legal name of counterparty, for example Company name.",
            "example": "Scientists Inc"
          },
          "firstName": {
            "type": "string",
            "description": "First name if counterparty is a person.",
            "example": "Nikola"
          },
          "lastName": {
            "type": "string",
            "description": "TLast name if counterparty is a person.",
            "example": "Tesla"
          },
          "email": {
            "type": "string",
            "description": "The company's or person's email.",
            "example": "nikola.tesla@email.com"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The company's or person'e phone number.",
            "example": "877-456-4376"
          },
          "address": {
            "description": "Address Information is Required for `Checkprint` and `Positive Pay` payments.",
            "$ref": "#/components/schemas/address"
          },
          "taxId": {
            "type": "string",
            "description": "Taxation identification number for the company. Tax id is 9 digits (numeric values only) long.\n[This field is masked](#tag/Masking-Sentive-Data).",
            "example": "123456789"
          },
          "ssn": {
            "type": "string",
            "description": "Social Security Number belonging to the principle officer within the organization. SSN is either 4 or 10 digits\n(numeric values only) long. This field is masked](#tag/Masking-Sentive-Data).",
            "example": "123456789"
          },
          "principleOfficerDoB": {
            "type": "string",
            "description": "Date of Birth of the principle officer within the organization in `yyyy-mm-dd` format.",
            "example": "1856-06-10"
          },
          "bankAccounts": {
            "description": "An array of Bank account objects. `accountLabel` must be unique within SOP. Only on default account is allowed.\n`Used only for Client`.",
            "$ref": "#/components/schemas/array-of-bank-accounts"
          },
          "registeredPaymentMethods": {
            "description": "An array of Payment Method. `type` must be unique within SOP. `Used only for Counterparty`.",
            "$ref": "#/components/schemas/array-of-payment-methods"
          },
          "invoices": {
            "description": "An array of invoices associated to this subject of payment.",
            "$ref": "#/components/schemas/array-of-invoices"
          }
        }
      },
      "vendor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "Counterparty account UUID.\n",
            "example": "c923c32e-aa96-4191-af83-13a0496c1700"
          },
          "externalId": {
            "type": "string",
            "description": "External identifier that can be used for troubleshooting purposes.\n",
            "example": "this_is_the_external_id"
          },
          "subjectOfPayment": {
            "$ref": "#/components/schemas/subject-of-payment"
          }
        },
        "required": [
          "subjectOfPayment"
        ]
      },
      "array-of-vendors": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/vendor"
        },
        "minItems": 0
      },
      "embedded-array-of-vendors": {
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "properties": {
              "vendors": {
                "$ref": "#/components/schemas/array-of-vendors"
              }
            }
          }
        }
      },
      "page": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "description": "The number of items on the page."
          },
          "totalElements": {
            "type": "integer",
            "description": "The total number of elements in the list/search."
          },
          "totalPages": {
            "type": "integer",
            "description": "The total number of pages."
          },
          "number": {
            "type": "integer",
            "description": "The number of current page"
          }
        },
        "example": {
          "size": 1,
          "totalElements": 4,
          "totalPages": 4,
          "number": 3
        }
      },
      "payment-request-status": {
        "type": "string",
        "enum": [
          "RECEIVED",
          "PROCESSING",
          "SCHEDULED",
          "CANCEL_REQUESTED",
          "CANCELLED",
          "VALIDATION_FAILED",
          "FAILED",
          "REFUSED",
          "EXPIRED",
          "COMPLETED"
        ],
        "description": "Read only field. Holding Payment Request status. Possible [Statuses](#section/Payment-Request-Statuses)"
      },
      "message": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Error Code of an error if it occurred. Example, [Fispan Errors](#tag/FISPAN-Errors), ACH Return Codes"
          },
          "message": {
            "type": "string",
            "description": "Message describing the error or the latest information message for a related object."
          },
          "source": {
            "type": "string",
            "description": "Name of a source that generated the message. Example, FISPAN, ACH, SEPA"
          }
        },
        "example": {
          "code": "R17",
          "source": "ACH",
          "message": "R17: File Record Edit Criteria — Field(s) cannot be processed by RDFI."
        }
      },
      "array-of-messages": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/message"
        },
        "example": [
          {
            "code": "100001",
            "source": "FISPAN",
            "message": "Validation failed with: Empty input"
          },
          {
            "code": "R17",
            "source": "ACH",
            "message": "R17: File Record Edit Criteria — Field(s) cannot be processed by RDFI."
          },
          {
            "code": "R20",
            "source": "ACH",
            "message": "R20: Non-Transactional Account — ACH Entry to a non-Transactional Account."
          },
          {
            "source": "FISPAN",
            "message": "Request fulfilled successfully"
          }
        ]
      },
      "payment-request-log": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "Payment Request Log UUID"
          },
          "paymentRequestId": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of payment request for which status changed"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) date time in UTC of the status change"
          },
          "status": {
            "$ref": "#/components/schemas/payment-request-status"
          },
          "message": {
            "type": "string",
            "description": "Payment status explanation message. `DEPRECATION NOTICE` this field is deprecated. Please, use statusMessages\nfield instead",
            "deprecated": true
          },
          "statusMessages": {
            "$ref": "#/components/schemas/array-of-messages"
          }
        },
        "example": {
          "id": "858deed5-3af0-4f32-93c0-9a70b15a63f1",
          "paymentRequestId": "ae4913dd-232f-402e-a592-a530bc6fb7eb",
          "timestamp": "2018-11-15T20:34:16.243Z",
          "status": "VALIDATION_FAILED",
          "message": "[external] amount is invalid",
          "statusMessages": [
            {
              "code": "100001",
              "source": "FISPAN",
              "message": "Validation failed with: Empty input"
            }
          ]
        }
      },
      "array-of-payment-request-logs": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/payment-request-log"
        }
      },
      "embedded-array-of-payment-request-logs": {
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "properties": {
              "paymentRequestLogs": {
                "$ref": "#/components/schemas/array-of-payment-request-logs"
              }
            }
          }
        }
      },
      "webhook-event": {
        "type": "string",
        "enum": [
          "PAYMENT.ALL",
          "PAYMENT.RECEIVED",
          "PAYMENT.PROCESSING",
          "PAYMENT.SCHEDULED",
          "PAYMENT.CANCEL_REQUESTED",
          "PAYMENT.CANCELLED",
          "PAYMENT.VALIDATION_FAILED",
          "PAYMENT.FAILED",
          "PAYMENT.REFUSED",
          "PAYMENT.EXPIRED",
          "PAYMENT.COMPLETED"
        ]
      },
      "webhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "Webhook UUID. Never sent in the request and always returned in the response."
          },
          "events": {
            "type": "array",
            "description": "Events names to register Webhook. Check what Webhooks events are available [here](#section/Webhooks-Events)",
            "items": {
              "$ref": "#/components/schemas/webhook-event"
            }
          },
          "signingSecret": {
            "type": "string",
            "description": "Used to [secure webhooks](#section/Securing-Webhooks). Never returned in response."
          },
          "urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of Urls to callback when an event occurs"
          },
          "client": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "minLength": 36,
                "maxLength": 36,
                "description": "The client id in UUID format. Not returned in the response."
              }
            }
          },
          "serviceProvider": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "minLength": 36,
                "maxLength": 36,
                "description": "The service provider id in UUID format. Not returend in the response."
              }
            }
          }
        },
        "required": [
          "events",
          "urls"
        ]
      },
      "array-of-webhooks": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/webhook"
        },
        "example": [
          {
            "id": "61af493c-286c-4c0d-9ae1-fe39a14c9543",
            "events": [
              "PAYMENT.ALL"
            ],
            "urls": [
              "http://example.com/webhooks"
            ]
          }
        ]
      },
      "embedded-array-of-webhooks": {
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "properties": {
              "webhooks": {
                "$ref": "#/components/schemas/array-of-webhooks"
              }
            }
          }
        }
      },
      "fx": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The fx identification"
          },
          "externalQuoteId": {
            "type": "string",
            "description": "The fx external quote identification"
          },
          "rate": {
            "type": "string",
            "description": "The fx rate"
          }
        }
      },
      "payment-request-details": {
        "type": "object",
        "properties": {
          "checkNumber": {
            "type": "string",
            "description": "If the checkNumber is provided it `MUST` be a valid number.",
            "example": "1234"
          }
        }
      },
      "key-value": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key-value key"
          },
          "label": {
            "type": "string",
            "description": "The key-value label"
          },
          "value": {
            "type": "string",
            "description": "The key-value value"
          }
        }
      },
      "array-of-key-values": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/key-value"
        },
        "minItems": 0
      },
      "payment-request-base": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "Read only Payment request UUID"
          },
          "externalId": {
            "type": "string",
            "description": "External identifier that can be used for troubleshooting purposes. Must be unique for you"
          },
          "status": {
            "$ref": "#/components/schemas/payment-request-status"
          },
          "clientTxId": {
            "type": "string",
            "description": "The client transaction identification."
          },
          "clientAccountId": {
            "type": "string",
            "description": "Your bank account id, with which you would like to make payment."
          },
          "clientAccountUsageProfileId": {
            "type": "string",
            "description": "Your bank account usage profile id. Can only be specified when client account id is specified and has to be pre\nregistered with the bank account. Once registered, it can be retrieved along with bank-account details."
          },
          "vendorId": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "Read only Vendor UUID"
          },
          "serviceProviderId": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "Read only Service Provider UUID"
          },
          "erpProvider": {
            "$ref": "#/components/schemas/erp-provider"
          },
          "paymentMethodType": {
            "type": "string",
            "enum": [
              "ACH",
              "WIRE",
              "POSITIVE_PAY",
              "CHECK",
              "A2A_TRANSFER"
            ],
            "description": "Counterparty’s Payment method to be used for the request."
          },
          "amount": {
            "type": "number",
            "description": "Amount to be transfer in currency specified in the request"
          },
          "currency": {
            "type": "string",
            "description": "[ISO two-letter country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)\nfor the request"
          },
          "fulfillmentStartDate": {
            "type": "string",
            "format": "date-time",
            "description": "ISO date format `yyyy-MM-dd'T'HH:mm:ss.SSSZ` e.g. `2099-01-01T00:00:00.000+0000`. If provided future date then\nPayment Request will be sent for processing after the time."
          },
          "clientId": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "Read only Client UUID"
          },
          "sourceAccountId": {
            "type": "string",
            "description": "The source account id"
          },
          "sourceAccountUsageProfileId": {
            "type": "string",
            "description": "The source account usage profile identification"
          },
          "fx": {
            "$ref": "#/components/schemas/fx"
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of making this payment"
          },
          "details": {
            "$ref": "#/components/schemas/payment-request-details"
          },
          "error": {
            "type": "string",
            "deprecated": true,
            "description": "An message indicating the reason why payment has failed. `DEPRECATION NOTICE` this field is deprecated.\nPlease, use **statusMessages** field instead."
          },
          "statusMessages": {
            "$ref": "#/components/schemas/array-of-messages"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            }
          },
          "hasAttachments": {
            "type": "boolean",
            "description": "`true` if attachments list has at least one element. Available only in response."
          },
          "paymentDirection": {
            "type": "string",
            "enum": [
              "CREDIT",
              "DEBIT"
            ],
            "default": "CREDIT",
            "description": "The instruction of what payment type is to be used."
          },
          "reconcileDetails": {
            "$ref": "#/components/schemas/array-of-key-values"
          },
          "safetyHoldApplied": {
            "type": "boolean",
            "description": "Flag indicating if the payment has a security hold applied to it."
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A dictionary with both containing strings as key and value."
          },
          "vendorAddressId": {
            "type": "string",
            "description": "The identifier of the vendor address"
          },
          "vendorBankAccountId": {
            "type": "string",
            "description": "The identifier of the vendor bank account"
          },
          "destinationAccountId": {
            "type": "string",
            "description": "The identifier of the destination account"
          },
          "createdDate": {
            "type": "string",
            "description": "The payment request creation date",
            "format": "date-time"
          }
        }
      },
      "payment-request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/payment-request-base"
          },
          {
            "type": "object",
            "required": [
              "externalId",
              "clientAccountUsageProfileId",
              "paymentMethodType",
              "amount",
              "clientId"
            ],
            "example": {
              "id": "9bc253a1-5168-4894-bb6c-b0a96cf7747a",
              "externalId": "71e3549b-da92-4e5b-9684-468bd44dbfdb",
              "status": "RECEIVED",
              "fulfillmentStartDate": "2020-08-20T10:00:00.000-0700",
              "clientId": "5bbbb238-9ba4-42e5-b767-0e0c84dfeff5",
              "paymentMethodType": "ach",
              "clientAccountId": "16b4d4ee-c9a5-11e7-abc4-cec278b6b50a",
              "currency": "USD",
              "amount": "55000,",
              "purpose": "payment for heroic deeds",
              "paymentDirection": "DEBIT",
              "details": {
                "checkNumber": "1234"
              },
              "createdDate": "2017-08-20T22:39:52.129+0000",
              "error": "[external] amount is invalid",
              "statusMessages": [
                {
                  "code": "R17",
                  "source": "ACH",
                  "message": "R17: File Record Edit Criteria — Field(s) cannot be processed by RDFI."
                },
                {
                  "code": "R20",
                  "source": "ACH",
                  "message": "R20: Non-Transactional Account — ACH Entry to a non-Transactional Account."
                }
              ],
              "hasAttachments": true,
              "attachments": [
                {
                  "encodedContent": "JVBERi0xLjQKMyAwIG9iago8PC9"
                }
              ]
            }
          }
        ]
      },
      "array-of-payment-requests": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/payment-request"
        },
        "example": [
          {
            "id": "a71e0ee5-5cf1-4e36-bc38-8fe1e52b5088",
            "externalId": "98237d19-4f0f-42a4-94c2-54101af02220",
            "status": "RECEIVED",
            "fulfillmentStartDate": "2020-08-20T11:00:00.000-0700",
            "clientId": "5bbbb238-9ba4-42e5-b767-0e0c84dfeff5",
            "paymentMethodType": "wire",
            "clientAccountId": "16b4d4ee-c9a5-11e7-abc4-cec278b6b50a",
            "currency": "USD",
            "amount": "1000,",
            "purpose": "payment for AWS",
            "paymentDirection": "CREDIT",
            "details": {
              "checkNumber": "1234"
            },
            "createdDate": "2017-08-20T22:39:52.129+0000",
            "error": "No Bank Account with id 'aecc7964-811c-4cf3-ad75-53b329a45ff3' found for the Payer",
            "statusMessages": [
              {
                "code": "100002",
                "source": "FISPAN",
                "message": "No Bank Account with id 'aecc7964-811c-4cf3-ad75-53b329a45ff3' found for the Payer."
              }
            ],
            "hasAttachments": true,
            "attachments": [
              {
                "encodedContent": "JVBERi0xLjQKMyAwIG9iago8PC9"
              }
            ]
          }
        ]
      },
      "embedded-array-of-payment-requests": {
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "properties": {
              "paymentRequests": {
                "$ref": "#/components/schemas/array-of-payment-requests"
              }
            }
          }
        }
      },
      "payment-action-type": {
        "type": "string",
        "enum": [
          "CANCEL",
          "RETRY"
        ],
        "description": "A name of the action performed on Payment Request."
      },
      "payment-action-status": {
        "type": "string",
        "enum": [
          "COMPLETED",
          "ACCEPTED",
          "SYNCH_NOT_SUPPORTED",
          "TIMEOUT"
        ],
        "description": "Status of the action performed."
      },
      "payment-action": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/payment-action-type"
          },
          "async": {
            "type": "boolean",
            "description": "Flag that represents if the operation was performed in an async manner."
          },
          "status": {
            "$ref": "#/components/schemas/payment-action-status"
          }
        }
      },
      "erp-subject-of-payment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/subject-of-payment"
          },
          {
            "type": "object",
            "properties": {
              "externalId": {
                "type": "string",
                "description": "The external identifier of the subject of payment."
              }
            },
            "required": [
              "externalId",
              "name",
              "registeredPaymentMethods",
              "address",
              "email"
            ]
          }
        ]
      },
      "erp-payment-request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/payment-request-base"
          },
          {
            "type": "object",
            "properties": {
              "subjectOfPayment": {
                "$ref": "#/components/schemas/erp-subject-of-payment"
              }
            },
            "required": [
              "clientTxId",
              "amount",
              "currency"
            ]
          }
        ]
      },
      "transaction-status": {
        "type": "string",
        "description": "The status of the transaction",
        "enum": [
          "POSTED",
          "SETTLED"
        ]
      },
      "transaction-direction": {
        "type": "string",
        "description": "The type of the transaction",
        "enum": [
          "CREDIT",
          "DEBIT",
          "UNSPECIFIED"
        ]
      },
      "key-label-value": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key to be used"
          },
          "label": {
            "type": "string",
            "description": "The label to be used"
          },
          "value": {
            "type": "string",
            "description": "The value to be used"
          }
        }
      },
      "array-of-key-label-values": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/key-label-value"
        },
        "minItems": 0
      },
      "transaction-type": {
        "type": "string",
        "description": "Indicates type of transaction, can be calculated using the bai2 code",
        "default": "UNKNOWN",
        "enum": [
          "CHECK",
          "WIRE",
          "ACH",
          "UNKNOWN"
        ]
      },
      "transaction-sub-item": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "The id of Client the transaction sub item is associated with"
          },
          "bankAccountId": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "The id of Bank Account the transaction sub item is associated with"
          },
          "amount": {
            "$ref": "#/components/schemas/currency-and-amount"
          },
          "counterPartyName": {
            "type": "string",
            "description": "The counterparty name for the transaction sub item"
          },
          "paymentE2eId": {
            "type": "string",
            "description": "The identification of the e2e payment"
          },
          "billPaymentId": {
            "type": "string",
            "description": "The identification of the bill payment"
          },
          "paymentRequestId": {
            "type": "string",
            "description": "The identification of the payment request"
          },
          "status": {
            "$ref": "#/components/schemas/transaction-status"
          },
          "externalBatchId": {
            "type": "string",
            "description": "The identification of the external batch."
          },
          "details": {
            "$ref": "#/components/schemas/key-label-value"
          },
          "lastUpdatedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The sub item last updated date. The value format is `yyyy-MM-ddTHH:mm:ss.SSSZ`"
          }
        }
      },
      "array-of-transaction-sub-items": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/transaction-sub-item"
        },
        "minItems": 0
      },
      "transaction": {
        "type": "object",
        "description": "Client’s bank account transactions are available only in case core-banking integration enabled for\nthe Client’s Service provider.\n",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "Read only transaction id"
          },
          "bankAccountId": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "The id of Bank Account the transaction is associated with"
          },
          "clientId": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "The id of Client the transaction is associated with"
          },
          "externalId": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "The id of transaction in banking system"
          },
          "description": {
            "type": "string",
            "description": "The description of transaction"
          },
          "postDate": {
            "type": "string",
            "format": "date",
            "description": "The date when transaction is posted to the account. The value format is `yyyy-MM-ddTHH:mm:ss.SSS+0000`\n"
          },
          "settleDate": {
            "type": "string",
            "format": "date",
            "description": "The date when transaction settled. The value format is `yyyy-MM-ddTHH:mm:ss.SSS+0000`\n"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "The transaction amount"
          },
          "status": {
            "$ref": "#/components/schemas/transaction-status"
          },
          "currency": {
            "type": "string",
            "description": "[ISO currency three-letter code](https://en.wikipedia.org/wiki/ISO_4217#Active_codes)\n"
          },
          "creditDebitIndicator": {
            "$ref": "#/components/schemas/transaction-direction"
          },
          "customerReference": {
            "type": "string",
            "description": "The customer reference number"
          },
          "bankReference": {
            "type": "string",
            "description": "The bank reference number"
          },
          "bai2Code": {
            "type": "string",
            "description": "The [BAI reporting code](https://www.bai.org/docs/default-source/libraries/site-general-downloads/cash_management_2005.pdf)\n"
          },
          "tracerId": {
            "type": "string",
            "description": "Used to link this request to OutboundApiRequest"
          },
          "details": {
            "$ref": "#/components/schemas/array-of-key-label-values",
            "description": "Optional list of additional transaction details"
          },
          "hasSubItems": {
            "type": "boolean",
            "description": "Indicates whether this transaction has sub items",
            "default": false
          },
          "hasImages": {
            "type": "boolean",
            "description": "Indicates whether this transaction has images available for download",
            "default": false
          },
          "type": {
            "$ref": "#/components/schemas/transaction-type"
          },
          "bankAccountNumber": {
            "type": "string",
            "description": "The number of the Bank Account the transaction is associated with"
          },
          "subItems": {
            "$ref": "#/components/schemas/array-of-transaction-sub-items",
            "description": "Subitems associated with the transaction containing details of payments"
          },
          "deleteDate": {
            "type": "string",
            "format": "date",
            "description": "The date when the transaction was deleted"
          }
        },
        "example": {
          "bankAccountId": "de2c59d4-679a-40de-9fcb-11b736be081c",
          "clientId": "4ac56e60-a3d6-4334-b691-9a17e8e7df58",
          "externalId": "70eedcd8-b2d7-4da1-9f0d-af45b45038bc",
          "description": "Wire payment",
          "postDate": "2019-11-20T11:33:42.012-08:00",
          "settleDate": "2019-11-20T11:33:42.012-08:00",
          "amount": 300,
          "status": "SETTLED",
          "currency": "USD",
          "creditDebitIndicator": "CREDIT",
          "customerReference": "10ebfc5baab544de84a943f8c44e994a",
          "bankReference": "87e45b4d4a304fda86c29865558e6d4e",
          "bai2Code": "155",
          "tracerId": null,
          "details": [
            {
              "key": "AVAILABILITY_1_DAY_AMOUNT",
              "label": "Number of items",
              "value": "100"
            },
            {
              "key": "AVAILABILITY_2_DAY_AMOUNT",
              "label": "Number of items",
              "value": "200"
            }
          ],
          "hasSubItems": false,
          "hasImages": true,
          "type": "CHECK",
          "bankAccountNumber": null,
          "subItems": [],
          "deleteDate": null
        }
      },
      "array-of-transactions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/transaction"
        }
      },
      "embedded-array-of-transactions": {
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "properties": {
              "transactions": {
                "$ref": "#/components/schemas/array-of-transactions"
              }
            }
          }
        }
      }
    }
  }
}